#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataEntity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Cart")]
	public partial class ShoppingCartDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertUserCart(UserCart instance);
    partial void UpdateUserCart(UserCart instance);
    partial void DeleteUserCart(UserCart instance);
    partial void InsertUserBillingInfo(UserBillingInfo instance);
    partial void UpdateUserBillingInfo(UserBillingInfo instance);
    partial void DeleteUserBillingInfo(UserBillingInfo instance);
    #endregion
		
		public ShoppingCartDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShoppingCartDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShoppingCartDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShoppingCartDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<UserCart> UserCarts
		{
			get
			{
				return this.GetTable<UserCart>();
			}
		}
		
		public System.Data.Linq.Table<UserBillingInfo> UserBillingInfos
		{
			get
			{
				return this.GetTable<UserBillingInfo>();
			}
		}
	}
	
	[Table(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private string _Name;
		
		private int _ItemType;
		
		private decimal _Price;
		
		private string _ApplicationURL;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<UserCart> _UserCarts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnItemTypeChanging(int value);
    partial void OnItemTypeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnApplicationURLChanging(string value);
    partial void OnApplicationURLChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Item()
		{
			this._UserCarts = new EntitySet<UserCart>(new Action<UserCart>(this.attach_UserCarts), new Action<UserCart>(this.detach_UserCarts));
			OnCreated();
		}
		
		[Column(Storage="_ItemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemType", DbType="Int NOT NULL")]
		public int ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationURL", DbType="VarChar(MAX)")]
		public string ApplicationURL
		{
			get
			{
				return this._ApplicationURL;
			}
			set
			{
				if ((this._ApplicationURL != value))
				{
					this.OnApplicationURLChanging(value);
					this.SendPropertyChanging();
					this._ApplicationURL = value;
					this.SendPropertyChanged("ApplicationURL");
					this.OnApplicationURLChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Item_UserCart", Storage="_UserCarts", OtherKey="ItemID")]
		public EntitySet<UserCart> UserCarts
		{
			get
			{
				return this._UserCarts;
			}
			set
			{
				this._UserCarts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_UserCarts(UserCart entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[Table(Name="dbo.UserCart")]
	public partial class UserCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserCartID;
		
		private string _LoggedInUserID;
		
		private int _ItemID;
		
		private decimal _PaidAmount;
		
		private System.DateTime _PaidDate;
		
		private decimal _UnpaidAmount;
		
		private System.DateTime _UnPaidDate;
		
		private System.DateTime _ValidTill;
		
		private int _Quantity;
		
		private int _QuantityTerm;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserCartIDChanging(System.Guid value);
    partial void OnUserCartIDChanged();
    partial void OnLoggedInUserIDChanging(string value);
    partial void OnLoggedInUserIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnPaidAmountChanging(decimal value);
    partial void OnPaidAmountChanged();
    partial void OnPaidDateChanging(System.DateTime value);
    partial void OnPaidDateChanged();
    partial void OnUnpaidAmountChanging(decimal value);
    partial void OnUnpaidAmountChanged();
    partial void OnUnPaidDateChanging(System.DateTime value);
    partial void OnUnPaidDateChanged();
    partial void OnValidTillChanging(System.DateTime value);
    partial void OnValidTillChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnQuantityTermChanging(int value);
    partial void OnQuantityTermChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public UserCart()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[Column(Storage="_UserCartID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserCartID
		{
			get
			{
				return this._UserCartID;
			}
			set
			{
				if ((this._UserCartID != value))
				{
					this.OnUserCartIDChanging(value);
					this.SendPropertyChanging();
					this._UserCartID = value;
					this.SendPropertyChanged("UserCartID");
					this.OnUserCartIDChanged();
				}
			}
		}
		
		[Column(Storage="_LoggedInUserID", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string LoggedInUserID
		{
			get
			{
				return this._LoggedInUserID;
			}
			set
			{
				if ((this._LoggedInUserID != value))
				{
					this.OnLoggedInUserIDChanging(value);
					this.SendPropertyChanging();
					this._LoggedInUserID = value;
					this.SendPropertyChanged("LoggedInUserID");
					this.OnLoggedInUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_PaidAmount", DbType="Decimal(18,0) NOT NULL")]
		public decimal PaidAmount
		{
			get
			{
				return this._PaidAmount;
			}
			set
			{
				if ((this._PaidAmount != value))
				{
					this.OnPaidAmountChanging(value);
					this.SendPropertyChanging();
					this._PaidAmount = value;
					this.SendPropertyChanged("PaidAmount");
					this.OnPaidAmountChanged();
				}
			}
		}
		
		[Column(Storage="_PaidDate", DbType="DateTime NOT NULL")]
		public System.DateTime PaidDate
		{
			get
			{
				return this._PaidDate;
			}
			set
			{
				if ((this._PaidDate != value))
				{
					this.OnPaidDateChanging(value);
					this.SendPropertyChanging();
					this._PaidDate = value;
					this.SendPropertyChanged("PaidDate");
					this.OnPaidDateChanged();
				}
			}
		}
		
		[Column(Storage="_UnpaidAmount", DbType="Decimal(18,0) NOT NULL")]
		public decimal UnpaidAmount
		{
			get
			{
				return this._UnpaidAmount;
			}
			set
			{
				if ((this._UnpaidAmount != value))
				{
					this.OnUnpaidAmountChanging(value);
					this.SendPropertyChanging();
					this._UnpaidAmount = value;
					this.SendPropertyChanged("UnpaidAmount");
					this.OnUnpaidAmountChanged();
				}
			}
		}
		
		[Column(Storage="_UnPaidDate", DbType="DateTime NOT NULL")]
		public System.DateTime UnPaidDate
		{
			get
			{
				return this._UnPaidDate;
			}
			set
			{
				if ((this._UnPaidDate != value))
				{
					this.OnUnPaidDateChanging(value);
					this.SendPropertyChanging();
					this._UnPaidDate = value;
					this.SendPropertyChanged("UnPaidDate");
					this.OnUnPaidDateChanged();
				}
			}
		}
		
		[Column(Storage="_ValidTill", DbType="DateTime NOT NULL")]
		public System.DateTime ValidTill
		{
			get
			{
				return this._ValidTill;
			}
			set
			{
				if ((this._ValidTill != value))
				{
					this.OnValidTillChanging(value);
					this.SendPropertyChanging();
					this._ValidTill = value;
					this.SendPropertyChanged("ValidTill");
					this.OnValidTillChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityTerm", DbType="Int NOT NULL")]
		public int QuantityTerm
		{
			get
			{
				return this._QuantityTerm;
			}
			set
			{
				if ((this._QuantityTerm != value))
				{
					this.OnQuantityTermChanging(value);
					this.SendPropertyChanging();
					this._QuantityTerm = value;
					this.SendPropertyChanged("QuantityTerm");
					this.OnQuantityTermChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Item_UserCart", Storage="_Item", ThisKey="ItemID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.UserCarts.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.UserCarts.Add(this);
						this._ItemID = value.ItemID;
					}
					else
					{
						this._ItemID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserBillingInfo")]
	public partial class UserBillingInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserDetailID;
		
		private string _LoggedInUserID;
		
		private string _businessEmail;
		
		private System.Nullable<int> _CurrencyCode;
		
		private string _BillingFirstName;
		
		private string _BillingLastName;
		
		private string _BillingAddress1;
		
		private string _BillingAddress2;
		
		private string _BillingCity;
		
		private string _billingStateProvince;
		
		private string _billingCountry;
		
		private string _BillingEmail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserDetailIDChanging(System.Guid value);
    partial void OnUserDetailIDChanged();
    partial void OnLoggedInUserIDChanging(string value);
    partial void OnLoggedInUserIDChanged();
    partial void OnbusinessEmailChanging(string value);
    partial void OnbusinessEmailChanged();
    partial void OnCurrencyCodeChanging(System.Nullable<int> value);
    partial void OnCurrencyCodeChanged();
    partial void OnBillingFirstNameChanging(string value);
    partial void OnBillingFirstNameChanged();
    partial void OnBillingLastNameChanging(string value);
    partial void OnBillingLastNameChanged();
    partial void OnBillingAddress1Changing(string value);
    partial void OnBillingAddress1Changed();
    partial void OnBillingAddress2Changing(string value);
    partial void OnBillingAddress2Changed();
    partial void OnBillingCityChanging(string value);
    partial void OnBillingCityChanged();
    partial void OnbillingStateProvinceChanging(string value);
    partial void OnbillingStateProvinceChanged();
    partial void OnbillingCountryChanging(string value);
    partial void OnbillingCountryChanged();
    partial void OnBillingEmailChanging(string value);
    partial void OnBillingEmailChanged();
    #endregion
		
		public UserBillingInfo()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserDetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserDetailID
		{
			get
			{
				return this._UserDetailID;
			}
			set
			{
				if ((this._UserDetailID != value))
				{
					this.OnUserDetailIDChanging(value);
					this.SendPropertyChanging();
					this._UserDetailID = value;
					this.SendPropertyChanged("UserDetailID");
					this.OnUserDetailIDChanged();
				}
			}
		}
		
		[Column(Storage="_LoggedInUserID", DbType="VarChar(40)")]
		public string LoggedInUserID
		{
			get
			{
				return this._LoggedInUserID;
			}
			set
			{
				if ((this._LoggedInUserID != value))
				{
					this.OnLoggedInUserIDChanging(value);
					this.SendPropertyChanging();
					this._LoggedInUserID = value;
					this.SendPropertyChanged("LoggedInUserID");
					this.OnLoggedInUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_businessEmail", DbType="VarChar(1000)")]
		public string businessEmail
		{
			get
			{
				return this._businessEmail;
			}
			set
			{
				if ((this._businessEmail != value))
				{
					this.OnbusinessEmailChanging(value);
					this.SendPropertyChanging();
					this._businessEmail = value;
					this.SendPropertyChanged("businessEmail");
					this.OnbusinessEmailChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyCode", DbType="Int")]
		public System.Nullable<int> CurrencyCode
		{
			get
			{
				return this._CurrencyCode;
			}
			set
			{
				if ((this._CurrencyCode != value))
				{
					this.OnCurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._CurrencyCode = value;
					this.SendPropertyChanged("CurrencyCode");
					this.OnCurrencyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BillingFirstName", DbType="VarChar(1000)")]
		public string BillingFirstName
		{
			get
			{
				return this._BillingFirstName;
			}
			set
			{
				if ((this._BillingFirstName != value))
				{
					this.OnBillingFirstNameChanging(value);
					this.SendPropertyChanging();
					this._BillingFirstName = value;
					this.SendPropertyChanged("BillingFirstName");
					this.OnBillingFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_BillingLastName", DbType="VarChar(1000)")]
		public string BillingLastName
		{
			get
			{
				return this._BillingLastName;
			}
			set
			{
				if ((this._BillingLastName != value))
				{
					this.OnBillingLastNameChanging(value);
					this.SendPropertyChanging();
					this._BillingLastName = value;
					this.SendPropertyChanged("BillingLastName");
					this.OnBillingLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_BillingAddress1", DbType="VarChar(1000)")]
		public string BillingAddress1
		{
			get
			{
				return this._BillingAddress1;
			}
			set
			{
				if ((this._BillingAddress1 != value))
				{
					this.OnBillingAddress1Changing(value);
					this.SendPropertyChanging();
					this._BillingAddress1 = value;
					this.SendPropertyChanged("BillingAddress1");
					this.OnBillingAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_BillingAddress2", DbType="VarChar(1000)")]
		public string BillingAddress2
		{
			get
			{
				return this._BillingAddress2;
			}
			set
			{
				if ((this._BillingAddress2 != value))
				{
					this.OnBillingAddress2Changing(value);
					this.SendPropertyChanging();
					this._BillingAddress2 = value;
					this.SendPropertyChanged("BillingAddress2");
					this.OnBillingAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_BillingCity", DbType="VarChar(1000)")]
		public string BillingCity
		{
			get
			{
				return this._BillingCity;
			}
			set
			{
				if ((this._BillingCity != value))
				{
					this.OnBillingCityChanging(value);
					this.SendPropertyChanging();
					this._BillingCity = value;
					this.SendPropertyChanged("BillingCity");
					this.OnBillingCityChanged();
				}
			}
		}
		
		[Column(Storage="_billingStateProvince", DbType="VarChar(1000)")]
		public string billingStateProvince
		{
			get
			{
				return this._billingStateProvince;
			}
			set
			{
				if ((this._billingStateProvince != value))
				{
					this.OnbillingStateProvinceChanging(value);
					this.SendPropertyChanging();
					this._billingStateProvince = value;
					this.SendPropertyChanged("billingStateProvince");
					this.OnbillingStateProvinceChanged();
				}
			}
		}
		
		[Column(Storage="_billingCountry", DbType="VarChar(1000)")]
		public string billingCountry
		{
			get
			{
				return this._billingCountry;
			}
			set
			{
				if ((this._billingCountry != value))
				{
					this.OnbillingCountryChanging(value);
					this.SendPropertyChanging();
					this._billingCountry = value;
					this.SendPropertyChanged("billingCountry");
					this.OnbillingCountryChanged();
				}
			}
		}
		
		[Column(Storage="_BillingEmail", DbType="VarChar(1000)")]
		public string BillingEmail
		{
			get
			{
				return this._BillingEmail;
			}
			set
			{
				if ((this._BillingEmail != value))
				{
					this.OnBillingEmailChanging(value);
					this.SendPropertyChanging();
					this._BillingEmail = value;
					this.SendPropertyChanged("BillingEmail");
					this.OnBillingEmailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
