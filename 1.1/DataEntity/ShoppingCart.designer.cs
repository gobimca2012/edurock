#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataEntity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Cart")]
	public partial class ShoppingCartDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomerBillingInfo(CustomerBillingInfo instance);
    partial void UpdateCustomerBillingInfo(CustomerBillingInfo instance);
    partial void DeleteCustomerBillingInfo(CustomerBillingInfo instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertCustomerCart(CustomerCart instance);
    partial void UpdateCustomerCart(CustomerCart instance);
    partial void DeleteCustomerCart(CustomerCart instance);
    partial void InsertCustomerProduct(CustomerProduct instance);
    partial void UpdateCustomerProduct(CustomerProduct instance);
    partial void DeleteCustomerProduct(CustomerProduct instance);
    #endregion
		
		public ShoppingCartDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShoppingCartDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShoppingCartDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShoppingCartDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CustomerBillingInfo> CustomerBillingInfos
		{
			get
			{
				return this.GetTable<CustomerBillingInfo>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<CustomerCart> CustomerCarts
		{
			get
			{
				return this.GetTable<CustomerCart>();
			}
		}
		
		public System.Data.Linq.Table<CustomerProduct> CustomerProducts
		{
			get
			{
				return this.GetTable<CustomerProduct>();
			}
		}
	}
	
	[Table(Name="dbo.CustomerBillingInfo")]
	public partial class CustomerBillingInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CustomerDetailID;
		
		private string _UserID;
		
		private string _businessEmail;
		
		private System.Nullable<int> _CurrencyCode;
		
		private string _BillingFirstName;
		
		private string _BillingLastName;
		
		private string _BillingAddress1;
		
		private string _BillingAddress2;
		
		private string _BillingCity;
		
		private string _billingStateProvince;
		
		private string _billingCountry;
		
		private string _BillingEmail;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerDetailIDChanging(System.Guid value);
    partial void OnCustomerDetailIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnbusinessEmailChanging(string value);
    partial void OnbusinessEmailChanged();
    partial void OnCurrencyCodeChanging(System.Nullable<int> value);
    partial void OnCurrencyCodeChanged();
    partial void OnBillingFirstNameChanging(string value);
    partial void OnBillingFirstNameChanged();
    partial void OnBillingLastNameChanging(string value);
    partial void OnBillingLastNameChanged();
    partial void OnBillingAddress1Changing(string value);
    partial void OnBillingAddress1Changed();
    partial void OnBillingAddress2Changing(string value);
    partial void OnBillingAddress2Changed();
    partial void OnBillingCityChanging(string value);
    partial void OnBillingCityChanged();
    partial void OnbillingStateProvinceChanging(string value);
    partial void OnbillingStateProvinceChanged();
    partial void OnbillingCountryChanging(string value);
    partial void OnbillingCountryChanged();
    partial void OnBillingEmailChanging(string value);
    partial void OnBillingEmailChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CustomerBillingInfo()
		{
			OnCreated();
		}
		
		[Column(Storage="_CustomerDetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CustomerDetailID
		{
			get
			{
				return this._CustomerDetailID;
			}
			set
			{
				if ((this._CustomerDetailID != value))
				{
					this.OnCustomerDetailIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerDetailID = value;
					this.SendPropertyChanged("CustomerDetailID");
					this.OnCustomerDetailIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="VarChar(40)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_businessEmail", DbType="VarChar(1000)")]
		public string businessEmail
		{
			get
			{
				return this._businessEmail;
			}
			set
			{
				if ((this._businessEmail != value))
				{
					this.OnbusinessEmailChanging(value);
					this.SendPropertyChanging();
					this._businessEmail = value;
					this.SendPropertyChanged("businessEmail");
					this.OnbusinessEmailChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyCode", DbType="Int")]
		public System.Nullable<int> CurrencyCode
		{
			get
			{
				return this._CurrencyCode;
			}
			set
			{
				if ((this._CurrencyCode != value))
				{
					this.OnCurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._CurrencyCode = value;
					this.SendPropertyChanged("CurrencyCode");
					this.OnCurrencyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BillingFirstName", DbType="VarChar(1000)")]
		public string BillingFirstName
		{
			get
			{
				return this._BillingFirstName;
			}
			set
			{
				if ((this._BillingFirstName != value))
				{
					this.OnBillingFirstNameChanging(value);
					this.SendPropertyChanging();
					this._BillingFirstName = value;
					this.SendPropertyChanged("BillingFirstName");
					this.OnBillingFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_BillingLastName", DbType="VarChar(1000)")]
		public string BillingLastName
		{
			get
			{
				return this._BillingLastName;
			}
			set
			{
				if ((this._BillingLastName != value))
				{
					this.OnBillingLastNameChanging(value);
					this.SendPropertyChanging();
					this._BillingLastName = value;
					this.SendPropertyChanged("BillingLastName");
					this.OnBillingLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_BillingAddress1", DbType="VarChar(1000)")]
		public string BillingAddress1
		{
			get
			{
				return this._BillingAddress1;
			}
			set
			{
				if ((this._BillingAddress1 != value))
				{
					this.OnBillingAddress1Changing(value);
					this.SendPropertyChanging();
					this._BillingAddress1 = value;
					this.SendPropertyChanged("BillingAddress1");
					this.OnBillingAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_BillingAddress2", DbType="VarChar(1000)")]
		public string BillingAddress2
		{
			get
			{
				return this._BillingAddress2;
			}
			set
			{
				if ((this._BillingAddress2 != value))
				{
					this.OnBillingAddress2Changing(value);
					this.SendPropertyChanging();
					this._BillingAddress2 = value;
					this.SendPropertyChanged("BillingAddress2");
					this.OnBillingAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_BillingCity", DbType="VarChar(1000)")]
		public string BillingCity
		{
			get
			{
				return this._BillingCity;
			}
			set
			{
				if ((this._BillingCity != value))
				{
					this.OnBillingCityChanging(value);
					this.SendPropertyChanging();
					this._BillingCity = value;
					this.SendPropertyChanged("BillingCity");
					this.OnBillingCityChanged();
				}
			}
		}
		
		[Column(Storage="_billingStateProvince", DbType="VarChar(1000)")]
		public string billingStateProvince
		{
			get
			{
				return this._billingStateProvince;
			}
			set
			{
				if ((this._billingStateProvince != value))
				{
					this.OnbillingStateProvinceChanging(value);
					this.SendPropertyChanging();
					this._billingStateProvince = value;
					this.SendPropertyChanged("billingStateProvince");
					this.OnbillingStateProvinceChanged();
				}
			}
		}
		
		[Column(Storage="_billingCountry", DbType="VarChar(1000)")]
		public string billingCountry
		{
			get
			{
				return this._billingCountry;
			}
			set
			{
				if ((this._billingCountry != value))
				{
					this.OnbillingCountryChanging(value);
					this.SendPropertyChanging();
					this._billingCountry = value;
					this.SendPropertyChanged("billingCountry");
					this.OnbillingCountryChanged();
				}
			}
		}
		
		[Column(Storage="_BillingEmail", DbType="VarChar(1000)")]
		public string BillingEmail
		{
			get
			{
				return this._BillingEmail;
			}
			set
			{
				if ((this._BillingEmail != value))
				{
					this.OnBillingEmailChanging(value);
					this.SendPropertyChanging();
					this._BillingEmail = value;
					this.SendPropertyChanged("BillingEmail");
					this.OnBillingEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _Name;
		
		private int _ItemType;
		
		private decimal _Price;
		
		private string _QuantityText;
		
		private string _ApplicationURL;
		
		private string _Description;
		
		private string _MetaDescription;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<CustomerCart> _CustomerCarts;
		
		private EntitySet<CustomerProduct> _CustomerProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnItemTypeChanging(int value);
    partial void OnItemTypeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnQuantityTextChanging(string value);
    partial void OnQuantityTextChanged();
    partial void OnApplicationURLChanging(string value);
    partial void OnApplicationURLChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMetaDescriptionChanging(string value);
    partial void OnMetaDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Product()
		{
			this._CustomerCarts = new EntitySet<CustomerCart>(new Action<CustomerCart>(this.attach_CustomerCarts), new Action<CustomerCart>(this.detach_CustomerCarts));
			this._CustomerProducts = new EntitySet<CustomerProduct>(new Action<CustomerProduct>(this.attach_CustomerProducts), new Action<CustomerProduct>(this.detach_CustomerProducts));
			OnCreated();
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemType", DbType="Int NOT NULL")]
		public int ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_QuantityText", DbType="VarChar(1000)")]
		public string QuantityText
		{
			get
			{
				return this._QuantityText;
			}
			set
			{
				if ((this._QuantityText != value))
				{
					this.OnQuantityTextChanging(value);
					this.SendPropertyChanging();
					this._QuantityText = value;
					this.SendPropertyChanged("QuantityText");
					this.OnQuantityTextChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationURL", DbType="VarChar(MAX)")]
		public string ApplicationURL
		{
			get
			{
				return this._ApplicationURL;
			}
			set
			{
				if ((this._ApplicationURL != value))
				{
					this.OnApplicationURLChanging(value);
					this.SendPropertyChanging();
					this._ApplicationURL = value;
					this.SendPropertyChanged("ApplicationURL");
					this.OnApplicationURLChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MetaDescription", DbType="VarChar(MAX)")]
		public string MetaDescription
		{
			get
			{
				return this._MetaDescription;
			}
			set
			{
				if ((this._MetaDescription != value))
				{
					this.OnMetaDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MetaDescription = value;
					this.SendPropertyChanged("MetaDescription");
					this.OnMetaDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Product_CustomerCart", Storage="_CustomerCarts", OtherKey="ProductID")]
		public EntitySet<CustomerCart> CustomerCarts
		{
			get
			{
				return this._CustomerCarts;
			}
			set
			{
				this._CustomerCarts.Assign(value);
			}
		}
		
		[Association(Name="Product_CustomerProduct", Storage="_CustomerProducts", OtherKey="ProductID")]
		public EntitySet<CustomerProduct> CustomerProducts
		{
			get
			{
				return this._CustomerProducts;
			}
			set
			{
				this._CustomerProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerCarts(CustomerCart entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CustomerCarts(CustomerCart entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_CustomerProducts(CustomerProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CustomerProducts(CustomerProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.CustomerCart")]
	public partial class CustomerCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CustomerCartID;
		
		private string _UserID;
		
		private int _ProductID;
		
		private System.Nullable<decimal> _PricePerItem;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private int _Quantity;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerCartIDChanging(System.Guid value);
    partial void OnCustomerCartIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnPricePerItemChanging(System.Nullable<decimal> value);
    partial void OnPricePerItemChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CustomerCart()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_CustomerCartID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CustomerCartID
		{
			get
			{
				return this._CustomerCartID;
			}
			set
			{
				if ((this._CustomerCartID != value))
				{
					this.OnCustomerCartIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerCartID = value;
					this.SendPropertyChanged("CustomerCartID");
					this.OnCustomerCartIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_PricePerItem", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> PricePerItem
		{
			get
			{
				return this._PricePerItem;
			}
			set
			{
				if ((this._PricePerItem != value))
				{
					this.OnPricePerItemChanging(value);
					this.SendPropertyChanging();
					this._PricePerItem = value;
					this.SendPropertyChanged("PricePerItem");
					this.OnPricePerItemChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPrice", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Product_CustomerCart", Storage="_Product", ThisKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CustomerCarts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CustomerCarts.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomerProduct")]
	public partial class CustomerProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CustomerProductID;
		
		private int _ProductID;
		
		private string _UserID;
		
		private System.Nullable<decimal> _PricePerItem;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private int _Quantity;
		
		private System.Nullable<System.DateTime> _ExpireDate;
		
		private System.Nullable<System.DateTime> _BroughtDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerProductIDChanging(System.Guid value);
    partial void OnCustomerProductIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnPricePerItemChanging(System.Nullable<decimal> value);
    partial void OnPricePerItemChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnExpireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireDateChanged();
    partial void OnBroughtDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBroughtDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CustomerProduct()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_CustomerProductID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CustomerProductID
		{
			get
			{
				return this._CustomerProductID;
			}
			set
			{
				if ((this._CustomerProductID != value))
				{
					this.OnCustomerProductIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerProductID = value;
					this.SendPropertyChanged("CustomerProductID");
					this.OnCustomerProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_PricePerItem", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> PricePerItem
		{
			get
			{
				return this._PricePerItem;
			}
			set
			{
				if ((this._PricePerItem != value))
				{
					this.OnPricePerItemChanging(value);
					this.SendPropertyChanging();
					this._PricePerItem = value;
					this.SendPropertyChanged("PricePerItem");
					this.OnPricePerItemChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPrice", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ExpireDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireDate
		{
			get
			{
				return this._ExpireDate;
			}
			set
			{
				if ((this._ExpireDate != value))
				{
					this.OnExpireDateChanging(value);
					this.SendPropertyChanging();
					this._ExpireDate = value;
					this.SendPropertyChanged("ExpireDate");
					this.OnExpireDateChanged();
				}
			}
		}
		
		[Column(Storage="_BroughtDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BroughtDate
		{
			get
			{
				return this._BroughtDate;
			}
			set
			{
				if ((this._BroughtDate != value))
				{
					this.OnBroughtDateChanging(value);
					this.SendPropertyChanging();
					this._BroughtDate = value;
					this.SendPropertyChanged("BroughtDate");
					this.OnBroughtDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Product_CustomerProduct", Storage="_Product", ThisKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CustomerProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CustomerProducts.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
