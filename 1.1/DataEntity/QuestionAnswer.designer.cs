#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataEntity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="edu")]
	public partial class QuestionAnswerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQALoginUser(QALoginUser instance);
    partial void UpdateQALoginUser(QALoginUser instance);
    partial void DeleteQALoginUser(QALoginUser instance);
    partial void InsertAnswerState(AnswerState instance);
    partial void UpdateAnswerState(AnswerState instance);
    partial void DeleteAnswerState(AnswerState instance);
    partial void InsertQuestionType(QuestionType instance);
    partial void UpdateQuestionType(QuestionType instance);
    partial void DeleteQuestionType(QuestionType instance);
    partial void InsertQuestionStatus(QuestionStatus instance);
    partial void UpdateQuestionStatus(QuestionStatus instance);
    partial void DeleteQuestionStatus(QuestionStatus instance);
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    #endregion
		
		public QuestionAnswerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuestionAnswerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuestionAnswerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuestionAnswerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<QALoginUser> QALoginUsers
		{
			get
			{
				return this.GetTable<QALoginUser>();
			}
		}
		
		public System.Data.Linq.Table<AnswerState> AnswerStates
		{
			get
			{
				return this.GetTable<AnswerState>();
			}
		}
		
		public System.Data.Linq.Table<QuestionType> QuestionTypes
		{
			get
			{
				return this.GetTable<QuestionType>();
			}
		}
		
		public System.Data.Linq.Table<QuestionStatus> QuestionStatus
		{
			get
			{
				return this.GetTable<QuestionStatus>();
			}
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		[Function(Name="dbo.GetAnswerByQuestionID")]
		public ISingleResult<GetAnswerByQuestionIDResult> GetAnswerByQuestionID([Parameter(Name="QuestionID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> questionID, [Parameter(Name="AnswerStateID", DbType="Int")] System.Nullable<int> answerStateID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionID, answerStateID);
			return ((ISingleResult<GetAnswerByQuestionIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetQuestionByLoginUserID")]
		public ISingleResult<GetQuestionByLoginUserIDResult> GetQuestionByLoginUserID([Parameter(Name="LoginUserID", DbType="Int")] System.Nullable<int> loginUserID, [Parameter(Name="QuestionTypeID", DbType="Int")] System.Nullable<int> questionTypeID, [Parameter(Name="QuestionStatusID", DbType="Int")] System.Nullable<int> questionStatusID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginUserID, questionTypeID, questionStatusID);
			return ((ISingleResult<GetQuestionByLoginUserIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetQuestionByQuestionID")]
		public ISingleResult<GetQuestionByQuestionIDResult> GetQuestionByQuestionID([Parameter(Name="QuestionID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> questionID, [Parameter(Name="QuestionTypeID", DbType="Int")] System.Nullable<int> questionTypeID, [Parameter(Name="QuestionStatusID", DbType="Int")] System.Nullable<int> questionStatusID, [Parameter(Name="InstituteSubjectID", DbType="Int")] System.Nullable<int> instituteSubjectID, [Parameter(Name="InstituteCourceID", DbType="Int")] System.Nullable<int> instituteCourceID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), questionID, questionTypeID, questionStatusID, instituteSubjectID, instituteCourceID);
			return ((ISingleResult<GetQuestionByQuestionIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetQuestionStatus", IsComposable=true)]
		public string GetQuestionStatus([Parameter(DbType="Int")] System.Nullable<int> status)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), status).ReturnValue));
		}
		
		[Function(Name="dbo.GetQuestion")]
		public ISingleResult<GetQuestionResult> GetQuestion([Parameter(Name="Keyword", DbType="VarChar(1000)")] string keyword, [Parameter(Name="QuestionTypeID", DbType="Int")] System.Nullable<int> questionTypeID, [Parameter(Name="QuestionStatusID", DbType="Int")] System.Nullable<int> questionStatusID, [Parameter(Name="InstituteCourceID", DbType="Int")] System.Nullable<int> instituteCourceID, [Parameter(Name="InstituteSubjectID", DbType="Int")] System.Nullable<int> instituteSubjectID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), keyword, questionTypeID, questionStatusID, instituteCourceID, instituteSubjectID);
			return ((ISingleResult<GetQuestionResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.LoginUser")]
	public partial class QALoginUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoginUserID;
		
		private string _Username;
		
		private string _Password;
		
		private int _UserType;
		
		private System.Guid _UserId;
		
		private System.DateTime _ModifiedDate;
		
		private System.DateTime _CreatedDate;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginUserIDChanging(int value);
    partial void OnLoginUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserTypeChanging(int value);
    partial void OnUserTypeChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public QALoginUser()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[Column(Storage="_LoginUserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					this.OnLoginUserIDChanging(value);
					this.SendPropertyChanging();
					this._LoginUserID = value;
					this.SendPropertyChanged("LoginUserID");
					this.OnLoginUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_UserType", DbType="Int NOT NULL")]
		public int UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Association(Name="QALoginUser_Answer", Storage="_Answers", OtherKey="LoginUserID")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[Association(Name="QALoginUser_Question", Storage="_Questions", OtherKey="LoginUserID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.QALoginUser = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.QALoginUser = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QALoginUser = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QALoginUser = null;
		}
	}
	
	[Table(Name="dbo.AnswerState")]
	public partial class AnswerState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerStateID;
		
		private string _AnswerStateText;
		
		private int _LoginUserID;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Answer> _Answers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerStateIDChanging(int value);
    partial void OnAnswerStateIDChanged();
    partial void OnAnswerStateTextChanging(string value);
    partial void OnAnswerStateTextChanged();
    partial void OnLoginUserIDChanging(int value);
    partial void OnLoginUserIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public AnswerState()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			OnCreated();
		}
		
		[Column(Storage="_AnswerStateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnswerStateID
		{
			get
			{
				return this._AnswerStateID;
			}
			set
			{
				if ((this._AnswerStateID != value))
				{
					this.OnAnswerStateIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerStateID = value;
					this.SendPropertyChanged("AnswerStateID");
					this.OnAnswerStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerStateText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AnswerStateText
		{
			get
			{
				return this._AnswerStateText;
			}
			set
			{
				if ((this._AnswerStateText != value))
				{
					this.OnAnswerStateTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerStateText = value;
					this.SendPropertyChanged("AnswerStateText");
					this.OnAnswerStateTextChanged();
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					this.OnLoginUserIDChanging(value);
					this.SendPropertyChanging();
					this._LoginUserID = value;
					this.SendPropertyChanged("LoginUserID");
					this.OnLoginUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="AnswerState_Answer", Storage="_Answers", OtherKey="AnswerStateID")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.AnswerState = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.AnswerState = null;
		}
	}
	
	[Table(Name="dbo.QuestionType")]
	public partial class QuestionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionTypeID;
		
		private string _QuestionTypeTnext;
		
		private int _LoginUserID;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionTypeIDChanging(int value);
    partial void OnQuestionTypeIDChanged();
    partial void OnQuestionTypeTnextChanging(string value);
    partial void OnQuestionTypeTnextChanged();
    partial void OnLoginUserIDChanging(int value);
    partial void OnLoginUserIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public QuestionType()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[Column(Storage="_QuestionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionTypeID
		{
			get
			{
				return this._QuestionTypeID;
			}
			set
			{
				if ((this._QuestionTypeID != value))
				{
					this.OnQuestionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionTypeID = value;
					this.SendPropertyChanged("QuestionTypeID");
					this.OnQuestionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionTypeTnext", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string QuestionTypeTnext
		{
			get
			{
				return this._QuestionTypeTnext;
			}
			set
			{
				if ((this._QuestionTypeTnext != value))
				{
					this.OnQuestionTypeTnextChanging(value);
					this.SendPropertyChanging();
					this._QuestionTypeTnext = value;
					this.SendPropertyChanged("QuestionTypeTnext");
					this.OnQuestionTypeTnextChanged();
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					this.OnLoginUserIDChanging(value);
					this.SendPropertyChanging();
					this._LoginUserID = value;
					this.SendPropertyChanged("LoginUserID");
					this.OnLoginUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="QuestionType_Question", Storage="_Questions", OtherKey="QuestionTypeID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = null;
		}
	}
	
	[Table(Name="dbo.QuestionStatus")]
	public partial class QuestionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionStatusID;
		
		private string _QuestionStatusText;
		
		private int _LoginUserID;
		
		private System.DateTime _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionStatusIDChanging(int value);
    partial void OnQuestionStatusIDChanged();
    partial void OnQuestionStatusTextChanging(string value);
    partial void OnQuestionStatusTextChanged();
    partial void OnLoginUserIDChanging(int value);
    partial void OnLoginUserIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public QuestionStatus()
		{
			OnCreated();
		}
		
		[Column(Storage="_QuestionStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionStatusID
		{
			get
			{
				return this._QuestionStatusID;
			}
			set
			{
				if ((this._QuestionStatusID != value))
				{
					this.OnQuestionStatusIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionStatusID = value;
					this.SendPropertyChanged("QuestionStatusID");
					this.OnQuestionStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionStatusText", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string QuestionStatusText
		{
			get
			{
				return this._QuestionStatusText;
			}
			set
			{
				if ((this._QuestionStatusText != value))
				{
					this.OnQuestionStatusTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionStatusText = value;
					this.SendPropertyChanged("QuestionStatusText");
					this.OnQuestionStatusTextChanged();
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					this.OnLoginUserIDChanging(value);
					this.SendPropertyChanging();
					this._LoginUserID = value;
					this.SendPropertyChanged("LoginUserID");
					this.OnLoginUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AnswerID;
		
		private string _AnswerText;
		
		private string _Description;
		
		private System.Guid _QuestionID;
		
		private System.Nullable<int> _AnswerStateID;
		
		private int _LoginUserID;
		
		private System.Nullable<int> _AnswerRate;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<AnswerState> _AnswerState;
		
		private EntityRef<QALoginUser> _QALoginUser;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerIDChanging(System.Guid value);
    partial void OnAnswerIDChanged();
    partial void OnAnswerTextChanging(string value);
    partial void OnAnswerTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuestionIDChanging(System.Guid value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerStateIDChanging(System.Nullable<int> value);
    partial void OnAnswerStateIDChanged();
    partial void OnLoginUserIDChanging(int value);
    partial void OnLoginUserIDChanged();
    partial void OnAnswerRateChanging(System.Nullable<int> value);
    partial void OnAnswerRateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Answer()
		{
			this._AnswerState = default(EntityRef<AnswerState>);
			this._QALoginUser = default(EntityRef<QALoginUser>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_AnswerID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AnswerText
		{
			get
			{
				return this._AnswerText;
			}
			set
			{
				if ((this._AnswerText != value))
				{
					this.OnAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerText = value;
					this.SendPropertyChanged("AnswerText");
					this.OnAnswerTextChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerStateID", DbType="Int")]
		public System.Nullable<int> AnswerStateID
		{
			get
			{
				return this._AnswerStateID;
			}
			set
			{
				if ((this._AnswerStateID != value))
				{
					if (this._AnswerState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerStateIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerStateID = value;
					this.SendPropertyChanged("AnswerStateID");
					this.OnAnswerStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					if (this._QALoginUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoginUserIDChanging(value);
					this.SendPropertyChanging();
					this._LoginUserID = value;
					this.SendPropertyChanged("LoginUserID");
					this.OnLoginUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerRate", DbType="Int")]
		public System.Nullable<int> AnswerRate
		{
			get
			{
				return this._AnswerRate;
			}
			set
			{
				if ((this._AnswerRate != value))
				{
					this.OnAnswerRateChanging(value);
					this.SendPropertyChanging();
					this._AnswerRate = value;
					this.SendPropertyChanged("AnswerRate");
					this.OnAnswerRateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="AnswerState_Answer", Storage="_AnswerState", ThisKey="AnswerStateID", IsForeignKey=true)]
		public AnswerState AnswerState
		{
			get
			{
				return this._AnswerState.Entity;
			}
			set
			{
				AnswerState previousValue = this._AnswerState.Entity;
				if (((previousValue != value) 
							|| (this._AnswerState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnswerState.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._AnswerState.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._AnswerStateID = value.AnswerStateID;
					}
					else
					{
						this._AnswerStateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AnswerState");
				}
			}
		}
		
		[Association(Name="QALoginUser_Answer", Storage="_QALoginUser", ThisKey="LoginUserID", IsForeignKey=true)]
		public QALoginUser QALoginUser
		{
			get
			{
				return this._QALoginUser.Entity;
			}
			set
			{
				QALoginUser previousValue = this._QALoginUser.Entity;
				if (((previousValue != value) 
							|| (this._QALoginUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QALoginUser.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._QALoginUser.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._LoginUserID = value.LoginUserID;
					}
					else
					{
						this._LoginUserID = default(int);
					}
					this.SendPropertyChanged("QALoginUser");
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Question", ThisKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(System.Guid);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _QuestionID;
		
		private string _QuestionText;
		
		private string _Description;
		
		private int _LoginUserID;
		
		private int _InstituteCourceID;
		
		private System.Nullable<int> _InstituteSubjectID;
		
		private string _tag;
		
		private int _QuestionTypeID;
		
		private int _QuestionStatusID;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Answer> _Answers;
		
		private EntityRef<QALoginUser> _QALoginUser;
		
		private EntityRef<QuestionType> _QuestionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(System.Guid value);
    partial void OnQuestionIDChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLoginUserIDChanging(int value);
    partial void OnLoginUserIDChanged();
    partial void OnInstituteCourceIDChanging(int value);
    partial void OnInstituteCourceIDChanged();
    partial void OnInstituteSubjectIDChanging(System.Nullable<int> value);
    partial void OnInstituteSubjectIDChanged();
    partial void OntagChanging(string value);
    partial void OntagChanged();
    partial void OnQuestionTypeIDChanging(int value);
    partial void OnQuestionTypeIDChanged();
    partial void OnQuestionStatusIDChanging(int value);
    partial void OnQuestionStatusIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Question()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._QALoginUser = default(EntityRef<QALoginUser>);
			this._QuestionType = default(EntityRef<QuestionType>);
			OnCreated();
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					if (this._QALoginUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoginUserIDChanging(value);
					this.SendPropertyChanging();
					this._LoginUserID = value;
					this.SendPropertyChanged("LoginUserID");
					this.OnLoginUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_InstituteCourceID", DbType="Int NOT NULL")]
		public int InstituteCourceID
		{
			get
			{
				return this._InstituteCourceID;
			}
			set
			{
				if ((this._InstituteCourceID != value))
				{
					this.OnInstituteCourceIDChanging(value);
					this.SendPropertyChanging();
					this._InstituteCourceID = value;
					this.SendPropertyChanged("InstituteCourceID");
					this.OnInstituteCourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_InstituteSubjectID", DbType="Int")]
		public System.Nullable<int> InstituteSubjectID
		{
			get
			{
				return this._InstituteSubjectID;
			}
			set
			{
				if ((this._InstituteSubjectID != value))
				{
					this.OnInstituteSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._InstituteSubjectID = value;
					this.SendPropertyChanged("InstituteSubjectID");
					this.OnInstituteSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_tag", DbType="VarChar(MAX)")]
		public string tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if ((this._tag != value))
				{
					this.OntagChanging(value);
					this.SendPropertyChanging();
					this._tag = value;
					this.SendPropertyChanged("tag");
					this.OntagChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionTypeID", DbType="Int NOT NULL")]
		public int QuestionTypeID
		{
			get
			{
				return this._QuestionTypeID;
			}
			set
			{
				if ((this._QuestionTypeID != value))
				{
					if (this._QuestionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionTypeID = value;
					this.SendPropertyChanged("QuestionTypeID");
					this.OnQuestionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionStatusID", DbType="Int NOT NULL")]
		public int QuestionStatusID
		{
			get
			{
				return this._QuestionStatusID;
			}
			set
			{
				if ((this._QuestionStatusID != value))
				{
					this.OnQuestionStatusIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionStatusID = value;
					this.SendPropertyChanged("QuestionStatusID");
					this.OnQuestionStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Answers", OtherKey="QuestionID")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[Association(Name="QALoginUser_Question", Storage="_QALoginUser", ThisKey="LoginUserID", IsForeignKey=true)]
		public QALoginUser QALoginUser
		{
			get
			{
				return this._QALoginUser.Entity;
			}
			set
			{
				QALoginUser previousValue = this._QALoginUser.Entity;
				if (((previousValue != value) 
							|| (this._QALoginUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QALoginUser.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._QALoginUser.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._LoginUserID = value.LoginUserID;
					}
					else
					{
						this._LoginUserID = default(int);
					}
					this.SendPropertyChanged("QALoginUser");
				}
			}
		}
		
		[Association(Name="QuestionType_Question", Storage="_QuestionType", ThisKey="QuestionTypeID", IsForeignKey=true)]
		public QuestionType QuestionType
		{
			get
			{
				return this._QuestionType.Entity;
			}
			set
			{
				QuestionType previousValue = this._QuestionType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionType.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._QuestionType.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._QuestionTypeID = value.QuestionTypeID;
					}
					else
					{
						this._QuestionTypeID = default(int);
					}
					this.SendPropertyChanged("QuestionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	public partial class GetAnswerByQuestionIDResult
	{
		
		private System.Guid _AnswerID;
		
		private string _AnswerText;
		
		private string _Description;
		
		private System.Guid _QuestionID;
		
		private string _AnswerStatus;
		
		private System.Nullable<int> _AnswerStateID;
		
		private int _LoginUserID;
		
		private System.Nullable<int> _AnswerRate;
		
		private System.DateTime _ModifiedDate;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _PhotoPath;
		
		public GetAnswerByQuestionIDResult()
		{
		}
		
		[Column(Storage="_AnswerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					this._AnswerID = value;
				}
			}
		}
		
		[Column(Storage="_AnswerText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AnswerText
		{
			get
			{
				return this._AnswerText;
			}
			set
			{
				if ((this._AnswerText != value))
				{
					this._AnswerText = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[Column(Storage="_AnswerStatus", DbType="VarChar(1000)")]
		public string AnswerStatus
		{
			get
			{
				return this._AnswerStatus;
			}
			set
			{
				if ((this._AnswerStatus != value))
				{
					this._AnswerStatus = value;
				}
			}
		}
		
		[Column(Storage="_AnswerStateID", DbType="Int")]
		public System.Nullable<int> AnswerStateID
		{
			get
			{
				return this._AnswerStateID;
			}
			set
			{
				if ((this._AnswerStateID != value))
				{
					this._AnswerStateID = value;
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					this._LoginUserID = value;
				}
			}
		}
		
		[Column(Storage="_AnswerRate", DbType="Int")]
		public System.Nullable<int> AnswerRate
		{
			get
			{
				return this._AnswerRate;
			}
			set
			{
				if ((this._AnswerRate != value))
				{
					this._AnswerRate = value;
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this._ModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(1000)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(1000)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(1000)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[Column(Storage="_PhotoPath", DbType="VarChar(2000)")]
		public string PhotoPath
		{
			get
			{
				return this._PhotoPath;
			}
			set
			{
				if ((this._PhotoPath != value))
				{
					this._PhotoPath = value;
				}
			}
		}
	}
	
	public partial class GetQuestionByLoginUserIDResult
	{
		
		private string _QuestionText;
		
		private System.Guid _QuestionID;
		
		private string _Description;
		
		private int _LoginUserID;
		
		private int _QuestionTypeID;
		
		private string _QuestionStatus;
		
		private System.DateTime _ModifiedDate;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _PhotoPath;
		
		private string _QuestionType;
		
		private int _QuestionStatusID;
		
		public GetQuestionByLoginUserIDResult()
		{
		}
		
		[Column(Storage="_QuestionText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this._QuestionText = value;
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					this._LoginUserID = value;
				}
			}
		}
		
		[Column(Storage="_QuestionTypeID", DbType="Int NOT NULL")]
		public int QuestionTypeID
		{
			get
			{
				return this._QuestionTypeID;
			}
			set
			{
				if ((this._QuestionTypeID != value))
				{
					this._QuestionTypeID = value;
				}
			}
		}
		
		[Column(Storage="_QuestionStatus", DbType="VarChar(1000)")]
		public string QuestionStatus
		{
			get
			{
				return this._QuestionStatus;
			}
			set
			{
				if ((this._QuestionStatus != value))
				{
					this._QuestionStatus = value;
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this._ModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(1000)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(1000)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(1000)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[Column(Storage="_PhotoPath", DbType="VarChar(2000)")]
		public string PhotoPath
		{
			get
			{
				return this._PhotoPath;
			}
			set
			{
				if ((this._PhotoPath != value))
				{
					this._PhotoPath = value;
				}
			}
		}
		
		[Column(Storage="_QuestionType", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this._QuestionType = value;
				}
			}
		}
		
		[Column(Storage="_QuestionStatusID", DbType="Int NOT NULL")]
		public int QuestionStatusID
		{
			get
			{
				return this._QuestionStatusID;
			}
			set
			{
				if ((this._QuestionStatusID != value))
				{
					this._QuestionStatusID = value;
				}
			}
		}
	}
	
	public partial class GetQuestionByQuestionIDResult
	{
		
		private string _QuestionText;
		
		private System.Guid _QuestionID;
		
		private string _Description;
		
		private int _LoginUserID;
		
		private int _QuestionTypeID;
		
		private string _QuestionStatus;
		
		private System.DateTime _ModifiedDate;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _PhotoPath;
		
		private string _QuestionType;
		
		private int _QuestionStatusID;
		
		private int _InstituteCourceID;
		
		private System.Nullable<int> _InstituteSubjectID;
		
		public GetQuestionByQuestionIDResult()
		{
		}
		
		[Column(Storage="_QuestionText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this._QuestionText = value;
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					this._LoginUserID = value;
				}
			}
		}
		
		[Column(Storage="_QuestionTypeID", DbType="Int NOT NULL")]
		public int QuestionTypeID
		{
			get
			{
				return this._QuestionTypeID;
			}
			set
			{
				if ((this._QuestionTypeID != value))
				{
					this._QuestionTypeID = value;
				}
			}
		}
		
		[Column(Storage="_QuestionStatus", DbType="VarChar(1000)")]
		public string QuestionStatus
		{
			get
			{
				return this._QuestionStatus;
			}
			set
			{
				if ((this._QuestionStatus != value))
				{
					this._QuestionStatus = value;
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this._ModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(1000)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(1000)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(1000)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[Column(Storage="_PhotoPath", DbType="VarChar(2000)")]
		public string PhotoPath
		{
			get
			{
				return this._PhotoPath;
			}
			set
			{
				if ((this._PhotoPath != value))
				{
					this._PhotoPath = value;
				}
			}
		}
		
		[Column(Storage="_QuestionType", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this._QuestionType = value;
				}
			}
		}
		
		[Column(Storage="_QuestionStatusID", DbType="Int NOT NULL")]
		public int QuestionStatusID
		{
			get
			{
				return this._QuestionStatusID;
			}
			set
			{
				if ((this._QuestionStatusID != value))
				{
					this._QuestionStatusID = value;
				}
			}
		}
		
		[Column(Storage="_InstituteCourceID", DbType="Int NOT NULL")]
		public int InstituteCourceID
		{
			get
			{
				return this._InstituteCourceID;
			}
			set
			{
				if ((this._InstituteCourceID != value))
				{
					this._InstituteCourceID = value;
				}
			}
		}
		
		[Column(Storage="_InstituteSubjectID", DbType="Int")]
		public System.Nullable<int> InstituteSubjectID
		{
			get
			{
				return this._InstituteSubjectID;
			}
			set
			{
				if ((this._InstituteSubjectID != value))
				{
					this._InstituteSubjectID = value;
				}
			}
		}
	}
	
	public partial class GetQuestionResult
	{
		
		private string _QuestionText;
		
		private System.Guid _QuestionID;
		
		private string _Description;
		
		private int _LoginUserID;
		
		private int _QuestionTypeID;
		
		private string _QuestionStatus;
		
		private System.DateTime _ModifiedDate;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _PhotoPath;
		
		private string _QuestionType;
		
		private int _QuestionStatusID;
		
		public GetQuestionResult()
		{
		}
		
		[Column(Storage="_QuestionText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this._QuestionText = value;
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this._QuestionID = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_LoginUserID", DbType="Int NOT NULL")]
		public int LoginUserID
		{
			get
			{
				return this._LoginUserID;
			}
			set
			{
				if ((this._LoginUserID != value))
				{
					this._LoginUserID = value;
				}
			}
		}
		
		[Column(Storage="_QuestionTypeID", DbType="Int NOT NULL")]
		public int QuestionTypeID
		{
			get
			{
				return this._QuestionTypeID;
			}
			set
			{
				if ((this._QuestionTypeID != value))
				{
					this._QuestionTypeID = value;
				}
			}
		}
		
		[Column(Storage="_QuestionStatus", DbType="VarChar(1000)")]
		public string QuestionStatus
		{
			get
			{
				return this._QuestionStatus;
			}
			set
			{
				if ((this._QuestionStatus != value))
				{
					this._QuestionStatus = value;
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this._ModifiedDate = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(1000)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(1000)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(1000)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this._MiddleName = value;
				}
			}
		}
		
		[Column(Storage="_PhotoPath", DbType="VarChar(2000)")]
		public string PhotoPath
		{
			get
			{
				return this._PhotoPath;
			}
			set
			{
				if ((this._PhotoPath != value))
				{
					this._PhotoPath = value;
				}
			}
		}
		
		[Column(Storage="_QuestionType", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string QuestionType
		{
			get
			{
				return this._QuestionType;
			}
			set
			{
				if ((this._QuestionType != value))
				{
					this._QuestionType = value;
				}
			}
		}
		
		[Column(Storage="_QuestionStatusID", DbType="Int NOT NULL")]
		public int QuestionStatusID
		{
			get
			{
				return this._QuestionStatusID;
			}
			set
			{
				if ((this._QuestionStatusID != value))
				{
					this._QuestionStatusID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
