##|TYPE Template
##|UNIQUEID aef770b3-94cb-4fe4-92a6-9274afa6d03b
##|TITLE AddFormAjaxCS
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		ui.Title = ".NetScript C# Sample: Java Class";
		ui.Width = 340;
		ui.Height = 300;

		// Setup Database selection combobox.
		GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
		GuiComboBox cmbDatabases = ui.AddComboBox("databaseName", "Select a database.");

		// Setup Tables selection multi-select listbox.
		GuiLabel label_t = ui.AddLabel("lblTables", "Select table:", "Select table from the combobox below.");
		GuiComboBox cmbTables = ui.AddComboBox("tableName", "Select a table.");

		// bind data to the controls
		cmbDatabases.BindData(MyMeta.Databases);
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
		GuiTextBox txtPrefix=ui.AddTextBox("Prefix","","");
		
		// Attach the onchange event to the cmbDatabases control.
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");

	
		ui.ShowGui = true;ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		ui.ShowGui = true;
	}
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDatabases = ui["databaseName"] as GuiComboBox;
		GuiComboBox cmbTables = ui["tableName"] as GuiComboBox;
		
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}
	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		string databaseName = input["databaseName"].ToString();
		string tableName = input["tableName"].ToString();
		//int columnCount=0;
		IDatabase database = MyMeta.Databases[databaseName];
		ITable table = database.Tables[tableName];
		ArrayList ControlIDS = new ArrayList();		
		string Prefix = input["Prefix"].ToString();
		AddFunction(table);
	
	}
	
	//Start Function
	public string GetFunctionAssignment(IColumn column)
	{
		string script="";
		if(column.LanguageType.ToLower()=="string" )
		{		    
			script+="string "+column.Alias+";";	
			script+="if(true){";			
			script+=column.Alias+"=Request.Params[txt"+column.Alias+".ClientID].ToString();";
			script+="}";
			
		}
		else if(column.LanguageType.ToLower()=="datetime")
		{
			script+="DateTime "+column.Alias+";";
			script+="if(true){";			
			script+=column.Alias+"=Convert.ToDateTime(Request.Params[dd"+column.Alias+".SelectedValue].ToString());";
			script+="}";
		}
		else if(column.LanguageType.ToLower()=="guid")
		{
			script+="Guid "+column.Alias+";";
			script+="if(true){";			
			script+=column.Alias+"=new Guid(Request.Params[dd"+column.Alias+".SelectedValue].ToString());";
			script+="}";
		}
		else if(column.LanguageType.ToLower()=="boolean" || column.LanguageType.ToLower()=="bool")
		{
			script+="bool "+column.Alias+";";
			script+="if(true){";			
			script+=column.Alias+"=Convert.ToBoolean(Request.Params[chk"+column.Alias+".Checked]);";
			script+="}";
		}
		else if(column.LanguageType.ToLower()=="int" )
		{
			script+="int "+column.Alias+";";
			script+="if(true){";			
			script+=column.Alias+"=Convert.ToInt32(Request.Params[dd"+column.Alias+".SelectedValue]);";
			script+="}";
		}
		
		return script;			
			
	}
	//End Function
	//Start Function
	private void AddFunction(ITable table)
	{
		foreach(IColumn column in table.Columns)
		{
		%>
			<%=GetFunctionAssignment(column)%>
		<%
		}
	}
	
	
	//End Function

}
%>
##|BODY_END
