##|TYPE Template
##|UNIQUEID 2bd169f1-6844-488a-8dab-dcda50b8e38c
##|TITLE AddFormCs
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		ui.Title = ".NetScript C# Sample: Java Class";
		ui.Width = 340;
		ui.Height = 200;

		// Setup Database selection combobox.
		GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
		GuiComboBox cmbDatabases = ui.AddComboBox("databaseName", "Select a database.");

		// Setup Tables selection multi-select listbox.
		GuiLabel label_t = ui.AddLabel("lblTables", "Select table:", "Select table from the combobox below.");
		GuiComboBox cmbTables = ui.AddComboBox("tableName", "Select a table.");

		// bind data to the controls
		cmbDatabases.BindData(MyMeta.Databases);
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
		
		
		// Attach the onchange event to the cmbDatabases control.
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");

	
		ui.ShowGui = true;ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		ui.ShowGui = true;
	}
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDatabases = ui["databaseName"] as GuiComboBox;
		GuiComboBox cmbTables = ui["tableName"] as GuiComboBox;
		
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		string databaseName = input["databaseName"].ToString();
		string tableName = input["tableName"].ToString();
		
		IDatabase database = MyMeta.Databases[databaseName];
		ITable table = database.Tables[tableName];
		AddFunction(table);
		EditFunction(table);
		BindFunction(table);
		GenerateProperty();
	}
	//Start function
	public string GetFunctionAssignment(IColumn column)
	{
		string script="";
		if(column.LanguageType.ToLower()=="string" )
		{		    
			script+="string "+column.Alias+";";	
			script+="if(false){";
			script+="throw new Exception(\"\");";
			script+="}";			
			script+=column.Alias+"=txt"+column.Alias+".Text;";
			
			
		}
		else if(column.LanguageType.ToLower()=="datetime")
		{
			script+="DateTime "+column.Alias+";";	
			script+="if(false){";
			script+="throw new Exception(\"\");";
			script+="}";
			script+="Convert.ToDateTime("+column.Alias+"=txt"+column.Alias+".Text);";
			
		}
		else if(column.LanguageType.ToLower()=="guid")
		{
			script+="Guid "+column.Alias+";";
			script+="if(false){";
			script+="throw new Exception(\"\");";
			script+="}";			
			script+=column.Alias+"=new Guid(dd"+column.Alias+".SelectedValue);";
			
		}
		else if(column.LanguageType.ToLower()=="boolean" || column.LanguageType.ToLower()=="bool")
		{
			script+="bool "+column.Alias+";";
			script+="if(false){";
			script+="throw new Exception(\"\");";
			script+="}";				
			script+=column.Alias+"=Convert.ToBoolean(chk"+column.Alias+".Checked);";
		
		}
		else if(column.LanguageType.ToLower()=="int" )
		{
			script+="int "+column.Alias+";";
			script+="if(false){";	
			script+="throw new Exception(\"\");";
			script+="}";
			script+=column.Alias+"=Convert.ToInt32(dd"+column.Alias+".SelectedValue);";
			
		}
		
		return script;			
			
	}
	//End Function
	
	//Start function
	public string GetControlAssignment(IColumn column)
	{
		string script="";
		if(column.LanguageType.ToLower()=="string" || column.LanguageType.ToLower()=="datetime")
		{		    
			script+="txt"+column.Alias+".Text=data."+column.Alias+";";							
		}
		else if(column.LanguageType.ToLower()=="guid")
		{
			script+="dd"+column.Alias+".SelectedValue=data."+column.Alias+".ToString();";			
		}
		else if(column.LanguageType.ToLower()=="boolean" || column.LanguageType.ToLower()=="bool")
		{
			script+="chk"+column.Alias+".Checked=data."+column.Alias+";";			
		}
		else if(column.LanguageType.ToLower()=="int" )
		{
			script+="dd"+column.Alias+".SelectedValue=data."+column.Alias+".ToString();";						
		}
		
		return script;			
			
	}
	//End Function
	
	//Start function
	public string GenerateAddFunction(ITable table)
	{
		string script="";
		script+="new "+table.Alias+"Controller().Add(";
		int CountCol=0;
		foreach(IColumn column in table.Columns)
		{
			if(CountCol==0)
			{
			 script+=column.Alias;
			}
			else
			{
			script+=","+column.Alias;
			}
			CountCol++;
		}
		script+=");";
		
		return script;
	}
	
	//End Function
	
	//Start function
	public string GenerateUpdateFunction(ITable table)
	{
		string script="";
		script+="new "+table.Alias+"Controller().UpdateBy"+table.Alias+"ID(";
		int CountCol=0;
		foreach(IColumn column in table.Columns)
		{
			if(CountCol==0)
			{
			 script+=column.Alias;
			}
			else
			{
			script+=","+column.Alias;
			}
			CountCol++;
		}
		script+=");";
		
		return script;
	}
	
	//End Function
	
	
	
	
	
	//Start function	
	public void AddFunction(ITable table)
	{
	    %>
		private void AddData()
		{	
		try
		{
		<%
		foreach(IColumn column in table.Columns)
		{
		%>		
		<%=GetFunctionAssignment(column)%>				
		<%
		}
		%>
		<%=GenerateAddFunction(table)%>
		}		
		catch(Exception ex)
        {
                divMessage="<div class='error'>"+ex.Message+"</div>";
         }
		 }
		<%
		
	}
	
	//End Function
	
	//Start function	
	public void EditFunction(ITable table)
	{
	    %>
		private void EditData(Guid ID)
		{		
		Guid PID=ID;
		<%
		foreach(IColumn column in table.Columns)
		{
		%>		
		<%=GetFunctionAssignment(column)%>				
		<%
		}
		%>
		<%=GenerateUpdateFunction(table)%>
		}
		<%
		
	}
	
	//End Function
	
	//Start function	
	public void BindFunction(ITable table)
	{
	    %>
		private void BindData(Guid ID)
		{
		    var dataBunch = new <%=table.Alias%>Controller().<%=table.Alias%>Getby<%=table.Alias%>(ID);
			if (dataBunch.Count > 0)
			{
				var data=dataBunch[0];
			<%
			foreach(IColumn column in table.Columns)
			{
				%>		
				<%=GetControlAssignment(column)%>				
				<%
			}
			%>		
			}
		}
		<%		
	}
	
	//End Function
	
	//Start function	
	public void GenerateProperty()
	{
	%>
	private Guid ID
	{
		get
		{
			if (Request.QueryString["type"] != null)
			{
				if (Request.QueryString["id"] != null)
				{
					return new Guid(Request.QueryString["id"]);
				}
				else
				{
					return Guid.Empty;
				}
			}
			else
			{
				return Guid.Empty;
			}
		}



	}
	private bool IsEdit
	{
		get
		{
			if (Request.QueryString["type"] != null)
			{
				if (Request.QueryString["id"] != null)
				{

					//			ID = new Guid(Request.QueryString["id"]);
					return true;
				}
				else
				{
					return false;
				}
			}
			else
			{
				return false;
			}
		}

	}
   	<%
	}
	
	//End Function
}
%>
##|BODY_END
