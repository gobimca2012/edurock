##|TYPE Template
##|UNIQUEID c15769c4-d45e-4240-9faa-8301d3cf5679
##|TITLE BusinessLogicCreateFile
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		ui.Title = ".NetScript C# Sample: Java Class";
		ui.Width = 340;
		ui.Height = 200;

		// Setup Database selection combobox.
		GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
		GuiComboBox cmbDatabases = ui.AddComboBox("databaseName", "Select a database.");

		// Setup Tables selection multi-select listbox.
		GuiLabel label_t = ui.AddLabel("lblTables", "Select table:", "Select table from the combobox below.");
		GuiComboBox cmbTables = ui.AddComboBox("tableName", "Select a table.");

		// bind data to the controls
		cmbDatabases.BindData(MyMeta.Databases);
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
		
		
		// Attach the onchange event to the cmbDatabases control.
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");

	
		ui.ShowGui = true;ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		ui.ShowGui = true;
	}
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDatabases = ui["databaseName"] as GuiComboBox;
		GuiComboBox cmbTables = ui["tableName"] as GuiComboBox;
		
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		string databaseName = input["databaseName"].ToString();
		string tableName = input["tableName"].ToString();
		int columnCount=0;
		IDatabase database = MyMeta.Databases[databaseName];
		ITable table = database.Tables[tableName];
		%>
		
		
		using System;
		using System.Collections.Generic;
		using System.Linq;
		using System.Text;
		using DataEntity;
		using DataAccess;
		using System.Diagnostics;
		using System.Web.UI.WebControls;

		namespace BusinessLogic.Controller
		{
			public partial class <%=table.Alias%>Controller
			{
		#region AutoGenerated
		<%foreach (IColumn column in table.Columns){%>
		public List<<%=table.Alias%>> Getby<%=column.Alias%>(<%=column.LanguageType%> <%=column.Alias%>, int PageSize, int PageNumber)
		{
			try
			{
				return new DataProvider().<%=table.Alias%>Getby<%=column.Alias%>(<%=column.Alias%>,PageSize, PageNumber);
			}
			catch(Exception ex)
			{
			    if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return new List<<%=table.Alias%>>();
			}
		}
		<%}%>
		
		<%foreach (IColumn column in table.Columns){%>
		public List<<%=table.Alias%>> Getby<%=column.Alias%>(<%=column.LanguageType%> <%=column.Alias%>)
		{
			try
			{
				return new DataProvider().<%=table.Alias%>Getby<%=column.Alias%>(<%=column.Alias%>);
			}
			catch(Exception ex)
			{
				if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return new List<<%=table.Alias%>>();
			}
		}
		<%}%>
		public List<<%=table.Alias%>> Get(int PageSize, int PageNumber)
		{
			try
			{
				return new DataProvider().<%=table.Alias%>Get(PageSize, PageNumber);
			}
			catch(Exception ex)
			{
				if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return new List<<%=table.Alias%>>();
			}
		}
		public List<<%=table.Alias%>> Get()
		{
			try
			{
				return new DataProvider().<%=table.Alias%>Get();
			}
			catch(Exception ex)
			{
				if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return new List<<%=table.Alias%>>();
			}
		}
		
		<%columnCount=0;%>
		
		public bool Add(<%foreach (IColumn column in table.Columns){%><%columnCount++;if(columnCount!=table.Columns.Count){%><%=column.LanguageType%> <%=column.Alias%>,<%}else{%><%=column.LanguageType%> <%=column.Alias%>)<%}%><%}%>
		{
		<%columnCount=0;%>
			try
			{
				new DataProvider().<%=table.Alias%>Add(<%foreach (IColumn column in table.Columns){%><%columnCount++;if(columnCount!=table.Columns.Count){%><%=column.Alias%>,<%}else{%><%=column.Alias%>)<%}%><%}%>;
				return true;
			}
			catch(Exception ex)
			{
				if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return false;
			}
		}
		
		public bool Add(<%=table.Alias%> <%=table.Alias.ToLower()%>)
		{
		
			try
			{
				new DataProvider().<%=table.Alias%>Add(<%=table.Alias.ToLower()%>);
				return true;
			}
			catch(Exception ex)
			{
				if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return false;
			}
		}
		<%columnCount=0;%>
		public int Add(<%foreach (IColumn column in table.Columns){%><%columnCount++;
		if(columnCount>1)
			if(columnCount!=table.Columns.Count){%><%=column.LanguageType%> <%=column.Alias%>,<%}else{%><%=column.LanguageType%> <%=column.Alias%>)<%}%><%}%>
		{
		<%columnCount=0;%>
			try
			{
				int ID=new DataProvider().<%=table.Alias%>Add(<%foreach (IColumn column in table.Columns){%><%columnCount++;if(columnCount>1)if(columnCount!=table.Columns.Count){%><%=column.Alias%>,<%}else{%><%=column.Alias%>)<%}%><%}%>;
				return ID;
			}
			catch(Exception ex)
			{
				if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return 0;
			}
		}
	
		<%foreach (IColumn column in table.Columns){%>
		
		public bool Deleteby<%=column.Alias%>(<%=column.LanguageType%> <%=column.Alias%>)
		{
			try
			{
				new DataProvider().<%=table.Alias%>Deleteby<%=column.Alias%>(<%=column.Alias%>);
				return true;
			}
			catch(Exception ex)
			{
				if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return false;
			}
		}
		<%}%>
		
		<%foreach(IColumn iicolumn in table.Columns)
		{%>
		<%if(iicolumn.IsInPrimaryKey )
		{%>
		public bool UpdateBy<%=iicolumn.Alias%>(<%columnCount=0;foreach (IColumn column in table.Columns){%><%columnCount++;if(columnCount!=table.Columns.Count){%><%=column.LanguageType%> <%=column.Alias%>,<%}else{%><%=column.LanguageType%> <%=column.Alias%>)<%}%><%}%>
		{
		<%columnCount=0;%>
			try
			{
				new DataProvider().<%=table.Alias%>UpdateBy<%=iicolumn.Alias%>(<%foreach (IColumn column in table.Columns){%><%columnCount++;if(columnCount!=table.Columns.Count){%><%=column.Alias%>,<%}else{%><%=column.Alias%>)<%}%><%}%>;
				return true;
			}
			catch(Exception ex)
			{
				if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
				return false;
			}
		}
		
		<%}}%>
		public void Bind<%=table.Alias%>(DropDownList dd)
        {
            var data = Get();
            dd.DataSource = data;
            dd.DataTextField = "CatagoryName";
            dd.DataValueField = "<%=table.Alias%>ID";
            dd.DataBind();
            ListItem noneItem = new ListItem();
            noneItem.Text = "select";
            noneItem.Value = "0";
            dd.Items.Insert(0, noneItem);
        }
        public void Bind<%=table.Alias%>(DropDownList dd,string SelectedValue)
        {
            var data = Get();
            dd.DataSource = data;
            dd.DataTextField = "CatagoryName";
            dd.DataValueField = "<%=table.Alias%>ID";
            dd.DataBind();
            ListItem noneItem = new ListItem();
            noneItem.Text = "select";
            noneItem.Value = "0";
            dd.Items.Insert(0, noneItem);
            dd.SelectedValue = SelectedValue;
        }
		#endregion
				#region <%=table.Alias%>
				#endregion
				
	
		}
	}
	<%	
	output.save("D:/Rohan/Projects/Crameasy/Artichecture Template/Templates/"+table.Alias+"Controller.cs",false);
	%>
	<%}

}
%>
##|BODY_END
