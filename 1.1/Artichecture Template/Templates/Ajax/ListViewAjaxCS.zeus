##|TYPE Template
##|UNIQUEID 3062c59a-0684-4f72-a0be-bf2b978e4f2d
##|TITLE ListViewCS
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		ui.Title = ".NetScript C# Sample: Java Class";
		ui.Width = 340;
		ui.Height = 200;

		// Setup Database selection combobox.
		GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
		GuiComboBox cmbDatabases = ui.AddComboBox("databaseName", "Select a database.");

		// Setup Tables selection multi-select listbox.
		GuiLabel label_t = ui.AddLabel("lblTables", "Select table:", "Select table from the combobox below.");
		GuiComboBox cmbTables = ui.AddComboBox("tableName", "Select a table.");

		// bind data to the controls
		cmbDatabases.BindData(MyMeta.Databases);
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
		
		
		// Attach the onchange event to the cmbDatabases control.
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");

	
		ui.ShowGui = true;ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		ui.ShowGui = true;
	}
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDatabases = ui["databaseName"] as GuiComboBox;
		GuiComboBox cmbTables = ui["tableName"] as GuiComboBox;
		
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
	string databaseName = input["databaseName"].ToString();
		string tableName = input["tableName"].ToString();
		int columnCount=0;
		IDatabase database = MyMeta.Databases[databaseName];
		ITable table = database.Tables[tableName];
	%>
	public HtmlHelper _HtmlHelper = new HtmlHelper();
		private int PageNumber
    {
        get
        {
            if (Request.Params["pn"] != null)
                return Convert.ToInt32(Request.Params["pn"].ToString());
            else
            {
                lnkPrev<%=table.Alias%>.Visible = false;
                return 0;
            }
        }


    }

    private int TotalPage;
    private int PageSize = 1;

		protected void Page_Load(object sender, EventArgs e)
		{
			
			{
				BindList();
				//TotalPage = Convert.ToInt32(Math.Ceiling((decimal) new <%=table.Alias%>Controller().Get().Count / PageSize));
				//PaggerLinkManager();
			}
			
		}
		private void BindList()
		{
			List<%=table.Alias%>.DataSource = new <%=table.Alias%>Controller().Get();
			List<%=table.Alias%>.DataBind();
		}
		private void PaggerLinkManager()
    {


        if (PageNumber == 0)
        {
            lnkPrev<%=table.Alias%>.Visible = false;
        }
        if (TotalPage - 1 == PageNumber || TotalPage == 0)
        {
            lnkNext<%=table.Alias%>.Visible = false;
        }
        if (lnkNext<%=table.Alias%>.Visible)
        {
            //lnkNext<%=table.Alias%>.ExternameUrlParam += "&pn=" + (PageNumber + 1).ToString();
        }

        if (lnkPrev<%=table.Alias%>.Visible)
        {
            //lnkPrev<%=table.Alias%>.ExternameUrlParam += "&pn=" + (PageNumber - 1).ToString();
        }
    }
    protected void NextAjaxClick(object sender, AjaxControl.AjaxEventArg e)
    {

        BindList();
        PaggerLinkManager();
    }
    protected void PrevAjaxClick(object sender, AjaxControl.AjaxEventArg e)
    {

        BindList();
        PaggerLinkManager();
    }
	protected override void OnAjaxListViewCommand(AjaxListViewCommandArg e)
    {
        if (e.Command.Contains("delete"))
        {
            new <%=table.Alias%>Controller().Deleteby<%=table.Alias%>ID(Convert.ToInt32(e.Id));
            BindList();
        }
        base.OnAjaxListViewCommand(e);
    }
		
		protected void List<%=table.Alias%>OnItemDataBound(object sender, ListViewItemEventArgs e)
		{
			ListViewDataItem currentItem = (ListViewDataItem)e.Item;
        string CourceCatagoryID = ListCourceCatagory.DataKeys[currentItem.DataItemIndex]["CourceCatagoryID"].ToString();



		}
	

<%	}

}
%>
##|BODY_END
