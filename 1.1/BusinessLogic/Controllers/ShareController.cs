using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web.UI.WebControls;
using System.Diagnostics;
using DataEntity;
using DataAccess;
using Common;

namespace BusinessLogic
{
    public class ShareContent
    {
        public bool IsViewable
        {
            get;
            set;
        }
        public bool IsEditablable
        {
            get;
            set;
        }
        public bool IsAddable
        {
            get;
            set;
        }
    }
    public class ShareController
    {

        #region AutoGenerated

        public List<Share> GetbyShareID(Guid ShareID, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ShareGetbyShareID(ShareID, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }

        public List<Share> GetbyObjectType(int ObjectType, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ShareGetbyObjectType(ObjectType, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }

        public List<Share> GetbyObjectID(string ObjectID, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ShareGetbyObjectID(ObjectID, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }

        public List<Share> GetbyModifiedDate(DateTime ModifiedDate, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ShareGetbyModifiedDate(ModifiedDate, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }



        public List<Share> GetbyShareID(Guid ShareID)
        {
            try
            {
                return new DataProvider().ShareGetbyShareID(ShareID);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }

        public List<Share> GetbyObjectType(int ObjectType)
        {
            try
            {
                return new DataProvider().ShareGetbyObjectType(ObjectType);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }

        public List<Share> GetbyObjectID(string ObjectID)
        {
            try
            {
                return new DataProvider().ShareGetbyObjectID(ObjectID);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }

        public List<Share> GetbyModifiedDate(DateTime ModifiedDate)
        {
            try
            {
                return new DataProvider().ShareGetbyModifiedDate(ModifiedDate);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }

        public List<Share> Get(int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ShareGet(PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }
        public List<Share> Get()
        {
            try
            {
                return new DataProvider().ShareGet();
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }



        public bool Add(Guid ShareID, int ObjectType, string ObjectID, DateTime ModifiedDate)
        {

            try
            {
                new DataProvider().ShareAdd(ShareID, ObjectType, ObjectID, ModifiedDate);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }

        public Guid Add(int ObjectType, string ObjectID, DateTime ModifiedDate)
        {

            try
            {
                Guid ID = new DataProvider().ShareAdd(ObjectType, ObjectID, ModifiedDate);
                return ID;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return Guid.Empty;
            }
        }



        public bool DeletebyShareID(Guid ShareID)
        {
            try
            {
                new DataProvider().ShareDeletebyShareID(ShareID);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }


        public bool DeletebyObjectType(int ObjectType)
        {
            try
            {
                new DataProvider().ShareDeletebyObjectType(ObjectType);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }


        public bool DeletebyObjectID(string ObjectID)
        {
            try
            {
                new DataProvider().ShareDeletebyObjectID(ObjectID);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }


        public bool DeletebyModifiedDate(DateTime ModifiedDate)
        {
            try
            {
                new DataProvider().ShareDeletebyModifiedDate(ModifiedDate);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }




        public bool UpdateByShareID(Guid ShareID, int ObjectType, string ObjectID, DateTime ModifiedDate)
        {

            try
            {
                new DataProvider().ShareUpdateByShareID(ShareID, ObjectType, ObjectID, ModifiedDate);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }





        public void BindShare(DropDownList dd)
        {
            var data = Get();
            dd.DataSource = data;
            dd.DataTextField = "CatagoryName";
            dd.DataValueField = "ShareID";
            dd.DataBind();
            ListItem noneItem = new ListItem();
            noneItem.Text = "select";
            noneItem.Value = "0";
            dd.Items.Insert(0, noneItem);
        }
        public void BindShare(DropDownList dd, string SelectedValue)
        {
            var data = Get();
            dd.DataSource = data;
            dd.DataTextField = "CatagoryName";
            dd.DataValueField = "ShareID";
            dd.DataBind();
            ListItem noneItem = new ListItem();
            noneItem.Text = "select";
            noneItem.Value = "0";
            dd.Items.Insert(0, noneItem);
            dd.SelectedValue = SelectedValue;
        }
        #endregion
        #region Share
        public bool GetItemEditAccessByLoginUserID(string ObjectID, int ObjectType, int LoginUserID)
        {
            try
            {

                return new DataProvider().GetItemEditAccessByLoginUserID(ObjectID, ObjectType, LoginUserID);
            }
            catch
            {
                return false;
            }
        }
        public List<GetUserObjectAccessResult> GetUserObjectAccess(int LoginUserID, string ObjectID, int ObjectType)
        {
            try
            {

                return new DataProvider().GetUserObjectAccess(LoginUserID, ObjectID, ObjectType);
            }
            catch
            {
                return new List<GetUserObjectAccessResult>();
            }
        }
        public List<GetUserObjectAccessResult> GetUserObjectAccess(int LoginUserID, string ObjectID, int ObjectType, int PageSize, int PageNumber)
        {
            try
            {

                return new DataProvider().GetUserObjectAccess(LoginUserID, ObjectID, ObjectType, PageSize, PageNumber);
            }
            catch
            {
                return new List<GetUserObjectAccessResult>();
            }
        }
        public List<GetGroupObjectAccessResult> GetGroupObjectAccess(int LoginUserID, string ObjectID, int ObjectType)
        {
            try
            {

                return new DataProvider().GetGroupObjectAccess(LoginUserID, ObjectID, ObjectType);
            }
            catch
            {
                return new List<GetGroupObjectAccessResult>();
            }
        }
        public List<GetGroupObjectAccessResult> GetGroupObjectAccess(int LoginUserID, string ObjectID, int ObjectType, int PageSize, int PageNumber)
        {
            try
            {

                return new DataProvider().GetGroupObjectAccess(LoginUserID, ObjectID, ObjectType, PageSize, PageNumber);
            }
            catch
            {
                return new List<GetGroupObjectAccessResult>();
            }
        }
        public ShareContent GetSpaceAccess(string InstituteCourseObjectID, int ObjectType, int LoginUserID)
        {
            var data = new InstituteCourceController().GetbyInstituteCourceID(Convert.ToInt32(InstituteCourseObjectID));

            ShareContent access = GetItemAccess(InstituteCourseObjectID, ObjectType, LoginUserID, data[0].LoginUserID.Value);
            return access;


        }
        public ShareContent GetItemGroupAccess(string ObjectID, int ObjectType, int LoginUserID, int ObjectLoginUserID)
        {
            ShareContent objShareContent = new ShareContent();
            if (LoginUserID != ObjectLoginUserID)
            {

                objShareContent.IsViewable = false;
                objShareContent.IsEditablable = false;
                objShareContent.IsAddable = false;

                var GroupShareData = GetGroupObjectAccess(LoginUserID, ObjectID, ObjectType);
                foreach (GetGroupObjectAccessResult ga in GroupShareData)
                {
                    if ((bool)ga.EnableView && !objShareContent.IsViewable)
                    {
                        objShareContent.IsViewable = true;
                    }
                }
                foreach (GetGroupObjectAccessResult ga in GroupShareData)
                {
                    if ((bool)ga.EnableAdd && !objShareContent.IsAddable)
                    {
                        objShareContent.IsAddable = true;
                    }
                }
                foreach (GetGroupObjectAccessResult ga in GroupShareData)
                {
                    if ((bool)ga.EnableEdit && !objShareContent.IsEditablable)
                    {
                        objShareContent.IsEditablable = true;
                    }
                }

            }
            else
            {
                objShareContent.IsViewable = true;
                objShareContent.IsEditablable = true;
                objShareContent.IsAddable = true;

            }
            return objShareContent;

        }
        public ShareContent GetItemUserAccess(string ObjectID, int ObjectType, int LoginUserID, int ObjectLoginUserID)
        {
            ShareContent objShareContent = new ShareContent();
            if (LoginUserID != ObjectLoginUserID)
            {

                objShareContent.IsViewable = false;
                objShareContent.IsEditablable = false;
                objShareContent.IsAddable = false;
                //var SingleUserShareData = GetUserObjectAccess(LoginUserID, ObjectID, ObjectType);
                var SingleUserShareData = GetUserObjectAccess(LoginUserID, ObjectID, ObjectType);
                foreach (GetUserObjectAccessResult ga in SingleUserShareData)
                {
                    if ((bool)ga.EnableView && !objShareContent.IsViewable)
                    {
                        objShareContent.IsViewable = true;
                    }
                }
                foreach (GetUserObjectAccessResult ga in SingleUserShareData)
                {
                    if ((bool)ga.EnableAdd && !objShareContent.IsAddable)
                    {
                        objShareContent.IsAddable = true;
                    }
                }
                foreach (GetUserObjectAccessResult ga in SingleUserShareData)
                {
                    if ((bool)ga.EnableEdit && !objShareContent.IsEditablable)
                    {
                        objShareContent.IsEditablable = true;
                    }
                }

            }
            else
            {
                objShareContent.IsViewable = true;
                objShareContent.IsEditablable = true;
                objShareContent.IsAddable = true;

            }
            return objShareContent;

        }
        public ShareContent GetItemAllUserAccess(string ObjectID, int ObjectType, int LoginUserID, int ObjectLoginUserID)
        {
            ShareContent objShareContent = new ShareContent();
            if (LoginUserID != ObjectLoginUserID)
            {

                objShareContent.IsViewable = false;
                objShareContent.IsEditablable = false;
                objShareContent.IsAddable = false;
                var AllUserShareData = new ShareController().Get(ObjectID, ObjectType);
                if (AllUserShareData.Count > 0)
                {
                    if (AllUserShareData[0].EnableAllUserAdd == null)
                        AllUserShareData[0].EnableAllUserAdd = false;
                    if (AllUserShareData[0].EnableAllUserComment == null)
                        AllUserShareData[0].EnableAllUserComment = true;
                    if (AllUserShareData[0].EnableAllUserEdit == null)
                        AllUserShareData[0].EnableAllUserEdit = false;
                    if (AllUserShareData[0].EnableAllUseView == null)
                        AllUserShareData[0].EnableAllUseView = true;
                }
            }
            else
            {
                objShareContent.IsViewable = true;
                objShareContent.IsEditablable = true;
                objShareContent.IsAddable = true;

            }
            return objShareContent;

        }
        //public ShareContent GetItemAccess(string ObjectID, int ObjectType, int LoginUserID, int ObjectLoginUserID)
        //{
        //    ShareContent objShareContent = new ShareContent();

        //    if (LoginUserID != ObjectLoginUserID)
        //    {
        //        objShareContent.IsViewable = false;
        //        objShareContent.IsEditablable = false;
        //        objShareContent.IsAddable = false;
        //        var AllUserShareData = new ShareController().Get(ObjectID, ObjectType);
        //        if (AllUserShareData.Count > 0)
        //        {
        //            if (AllUserShareData[0].EnableAllUserAdd == null)
        //                AllUserShareData[0].EnableAllUserAdd = false;
        //            if (AllUserShareData[0].EnableAllUserComment == null)
        //                AllUserShareData[0].EnableAllUserComment = true;
        //            if (AllUserShareData[0].EnableAllUserEdit == null)
        //                AllUserShareData[0].EnableAllUserEdit = false;
        //            if (AllUserShareData[0].EnableAllUseView == null)
        //                AllUserShareData[0].EnableAllUseView = true;
        //        }
        //        var SingleUserShareData = GetUserObjectAccess(LoginUserID, ObjectID, ObjectType);
        //        var GroupShareData = GetGroupObjectAccess(LoginUserID, ObjectID, ObjectType);
        //        #region View Rights


        //        foreach (GetGroupObjectAccessResult ga in GroupShareData)
        //        {
        //            if ((bool)ga.EnableView && !objShareContent.IsViewable)
        //            {
        //                objShareContent.IsViewable = true;
        //            }
        //        }
        //        if (SingleUserShareData.Count > 0 && (bool)SingleUserShareData[0].EnableView && !objShareContent.IsViewable)
        //        {
        //            {
        //                objShareContent.IsViewable = true;
        //            }
        //        }
        //        if (AllUserShareData.Count > 0 && (bool)AllUserShareData[0].EnableAllUseView && !objShareContent.IsViewable)
        //        {
        //            //if ()
        //            {
        //                objShareContent.IsViewable = true;
        //            }
        //        }
        //        if (AllUserShareData.Count == 0)
        //        {
        //            objShareContent.IsViewable = true;
        //        }
        //        #endregion
        //        #region Edit rights


        //        if (AllUserShareData.Count > 0 && (bool)AllUserShareData[0].EnableAllUserEdit)
        //        {

        //            {
        //                objShareContent.IsEditablable = true;
        //            }
        //        }
        //        else if (GroupShareData.Count > 0 && (bool)GroupShareData[0].EnableEdit)
        //        {
        //            //if ()
        //            {
        //                objShareContent.IsEditablable = true;
        //            }
        //        }
        //        else if (SingleUserShareData.Count > 0 && (bool)SingleUserShareData[0].EnableEdit)
        //        {
        //            //if ()
        //            {
        //                objShareContent.IsEditablable = true;
        //            }
        //        }
        //        #endregion
        //        #region Add Rights
        //        if (AllUserShareData.Count > 0 && (bool)AllUserShareData[0].EnableAllUserAdd)
        //        {

        //            {
        //                objShareContent.IsAddable = true;
        //            }
        //        }
        //        else if (GroupShareData.Count > 0 && (bool)GroupShareData[0].EnableAdd)
        //        {
        //            //if ()
        //            {
        //                objShareContent.IsAddable = true;
        //            }
        //        }
        //        else if (SingleUserShareData.Count > 0 && (bool)SingleUserShareData[0].EnableAdd)
        //        {
        //            //if ()
        //            {
        //                objShareContent.IsAddable = true;
        //            }
        //        }
        //        #endregion
        //    }
        //    else
        //    {
        //        objShareContent.IsEditablable = true;
        //        objShareContent.IsViewable = true;
        //        objShareContent.IsAddable = true;
        //    }
        //    return objShareContent;
        //}
        public ShareContent GetItemAccess(string ObjectID, int ObjectType, int LoginUserID, int ObjectLoginUserID)
        {
            ShareContent objShareContent = new ShareContent();

            if (LoginUserID != ObjectLoginUserID)
            {
                objShareContent.IsViewable = false;
                objShareContent.IsEditablable = false;
                objShareContent.IsAddable = false;
                var itemAllUserAccess = GetItemAllUserAccess(ObjectID, ObjectType, LoginUserID, ObjectLoginUserID);
                var itemGroupAccess = GetItemGroupAccess(ObjectID, ObjectType, LoginUserID, ObjectLoginUserID);
                var itemUserAccess = GetItemUserAccess(ObjectID, ObjectType, LoginUserID, ObjectLoginUserID);

                #region View Permision


                if (itemAllUserAccess.IsViewable)
                {
                    objShareContent.IsViewable = true;
                }
                else if (itemGroupAccess.IsViewable)
                {
                    objShareContent.IsViewable = true;
                }
                else if (itemUserAccess.IsViewable)
                {
                    objShareContent.IsViewable = true;
                }

                #endregion

                #region Edit Permision
                if (itemAllUserAccess.IsEditablable)
                {
                    objShareContent.IsEditablable = true;
                }
                else if (itemGroupAccess.IsEditablable)
                {
                    objShareContent.IsEditablable = true;
                }
                else if (itemUserAccess.IsEditablable)
                {
                    objShareContent.IsEditablable = true;
                }
                #endregion

                #region Add Permision
                if (itemAllUserAccess.IsAddable)
                {
                    objShareContent.IsAddable = true;
                }
                else if (itemGroupAccess.IsAddable)
                {
                    objShareContent.IsAddable = true;
                }
                else if (itemUserAccess.IsAddable)
                {
                    objShareContent.IsAddable = true;
                }
                #endregion

            }
            else
            {
                objShareContent.IsEditablable = true;
                objShareContent.IsViewable = true;
                objShareContent.IsAddable = true;
            }
            return objShareContent;
        }
        public ShareContent GetItemAccess(string ObjectID, int ObjectType, int LoginUserID, int ObjectLoginUserID, int InstituteCourseID)
        {
            ShareContent objItemShareContent = new ShareContent();
            ShareContent objSpaceShareContent = new ShareContent();


            objSpaceShareContent = GetSpaceAccess(InstituteCourseID.ToString(), (int)ContentTypeEnum.InstituteCourse, LoginUserID);
            if (LoginUserID != ObjectLoginUserID)
            {

                objItemShareContent.IsViewable = false;
                objItemShareContent.IsEditablable = false;
                objItemShareContent.IsAddable = false;
                var dataShareData = new ShareController().Get(ObjectID, ObjectType);
                if (dataShareData.Count > 0)
                {
                    if (dataShareData[0].EnableAllUserAdd == null)
                        dataShareData[0].EnableAllUserAdd = false;
                    if (dataShareData[0].EnableAllUserComment == null)
                        dataShareData[0].EnableAllUserComment = true;
                    if (dataShareData[0].EnableAllUserEdit == null)
                        dataShareData[0].EnableAllUserEdit = false;
                    if (dataShareData[0].EnableAllUseView == null)
                        dataShareData[0].EnableAllUseView = true;
                }
                var dataShareUser = GetUserObjectAccess(LoginUserID, ObjectID, ObjectType);
                var dataGroupUser = GetGroupObjectAccess(LoginUserID, ObjectID, ObjectType);
                #region View Rights


                foreach (GetGroupObjectAccessResult ga in dataGroupUser)
                {
                    if ((bool)ga.EnableView && !objItemShareContent.IsViewable)
                    {
                        objItemShareContent.IsViewable = true;
                    }
                }
                if (dataShareUser.Count > 0 && (bool)dataShareUser[0].EnableView && !objItemShareContent.IsViewable)
                {
                    {
                        objItemShareContent.IsViewable = true;
                    }
                }
                if (dataShareData.Count > 0 && (bool)dataShareData[0].EnableAllUseView && !objItemShareContent.IsViewable)
                {
                    //if ()
                    {
                        objItemShareContent.IsViewable = true;
                    }
                }
                if (dataShareData.Count == 0)
                {
                    objItemShareContent.IsViewable = true;
                }
                #endregion
                #region Edit rights

                if (objSpaceShareContent.IsAddable)
                {
                    if (dataShareData.Count > 0 && (bool)dataShareData[0].EnableAllUserEdit)
                    {

                        {
                            objItemShareContent.IsEditablable = true;
                        }
                    }
                    else if (dataGroupUser.Count > 0 && (bool)dataGroupUser[0].EnableEdit)
                    {
                        //if ()
                        {
                            objItemShareContent.IsEditablable = true;
                        }
                    }
                    else if (dataShareUser.Count > 0 && (bool)dataShareUser[0].EnableEdit)
                    {
                        //if ()
                        {
                            objItemShareContent.IsEditablable = true;
                        }
                    }
                }
                #endregion
                #region Add Rights
                if (dataShareData.Count > 0 && (bool)dataShareData[0].EnableAllUserAdd)
                {

                    {
                        objItemShareContent.IsAddable = true;
                    }
                }
                else if (dataGroupUser.Count > 0 && (bool)dataGroupUser[0].EnableAdd)
                {
                    //if ()
                    {
                        objItemShareContent.IsAddable = true;
                    }
                }
                else if (dataShareUser.Count > 0 && (bool)dataShareUser[0].EnableAdd)
                {
                    //if ()
                    {
                        objItemShareContent.IsAddable = true;
                    }
                }
                #endregion
            }
            else
            {
                objItemShareContent.IsEditablable = true;
                objItemShareContent.IsViewable = true;
                objItemShareContent.IsAddable = true;
            }
            return objItemShareContent;
        }
        public bool UpdateShareCommentAllUser(int ObjectType, string ObjectID, bool EnableAllUseComment)
        {
            try
            {
                new DataProvider().UpdateShareCommentAllUser(ObjectType, ObjectID, EnableAllUseComment);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }
        public bool UpdateShareEditAllUser(int ObjectType, string ObjectID, bool EnableAllUseEdit)
        {
            try
            {
                new DataProvider().UpdateShareEditAllUser(ObjectType, ObjectID, EnableAllUseEdit);
                if (EnableAllUseEdit)
                    new DataProvider().UpdateShareViewAllUser(ObjectType, ObjectID, EnableAllUseEdit);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }
        public bool UpdateShareViewAllUser(int ObjectType, string ObjectID, bool EnableAllUseView)
        {
            try
            {
                new DataProvider().UpdateShareViewAllUser(ObjectType, ObjectID, EnableAllUseView);
                if (!EnableAllUseView)
                {
                    new DataProvider().UpdateShareEditAllUser(ObjectType, ObjectID, EnableAllUseView);
                    new DataProvider().UpdateShareAddAllUser(ObjectType, ObjectID, EnableAllUseView);
                }
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }
        public bool UpdateShareAddAllUser(int ObjectType, string ObjectID, bool EnableAllUseView)
        {
            try
            {
                new DataProvider().UpdateShareAddAllUser(ObjectType, ObjectID, EnableAllUseView);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }
        public List<Share> Get(string ObjectID, int Type)
        {
            try
            {
                return new DataProvider().ShareGet(ObjectID, Type);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" CreateControls: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<Share>();
            }
        }
        #endregion



    }
}
