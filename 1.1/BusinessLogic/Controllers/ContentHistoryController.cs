using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web.UI.WebControls;
using DataAccess;
using DataEntity;
using System.Diagnostics;
using System.Xml.Linq;
using Common;
using System.Xml.Serialization;
using System.IO;
using System.Xml;

namespace BusinessLogic.Controllers
{
    public class ContentHistoryController
    {


        #region AutoGenerated

        public List<ContentHistory> GetbyContentHistoryID(Guid ContentHistoryID, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyContentHistoryID(ContentHistoryID, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }

        public List<ContentHistory> GetbyContentID(string ContentID, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyContentID(ContentID, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }

        public List<ContentHistory> GetbyContentType(int ContentType, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyContentType(ContentType, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }

        public List<ContentHistory> GetbyEditorLoginUserID(int EditorLoginUserID, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyEditorLoginUserID(EditorLoginUserID, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }

        public List<ContentHistory> GetbyEditDate(DateTime EditDate, int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyEditDate(EditDate, PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }





        public List<ContentHistory> GetbyContentHistoryID(Guid ContentHistoryID)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyContentHistoryID(ContentHistoryID);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }

        public List<ContentHistory> GetbyContentID(string ContentID)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyContentID(ContentID);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }

        public List<ContentHistory> GetbyContentType(int ContentType)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyContentType(ContentType);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }

        public List<ContentHistory> GetbyEditorLoginUserID(int EditorLoginUserID)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyEditorLoginUserID(EditorLoginUserID);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }

        public List<ContentHistory> GetbyEditDate(DateTime EditDate)
        {
            try
            {
                return new DataProvider().ContentHistoryGetbyEditDate(EditDate);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }



        public List<ContentHistory> Get(int PageSize, int PageNumber)
        {
            try
            {
                return new DataProvider().ContentHistoryGet(PageSize, PageNumber);
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }
        public List<ContentHistory> Get()
        {
            try
            {
                return new DataProvider().ContentHistoryGet();
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return new List<ContentHistory>();
            }
        }



        public bool Add(Guid ContentHistoryID, string ContentID, int ContentType, int EditorLoginUserID, DateTime EditDate, XElement BeforeEditContent)
        {

            try
            {
                new DataProvider().ContentHistoryAdd(ContentHistoryID, ContentID, ContentType, EditorLoginUserID, EditDate, BeforeEditContent);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }

        public Guid Add(string ContentID, int ContentType, int EditorLoginUserID, DateTime EditDate, XElement BeforeEditContent)
        {

            try
            {
                Guid ID = new DataProvider().ContentHistoryAdd(ContentID, ContentType, EditorLoginUserID, EditDate, BeforeEditContent);
                return ID;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return Guid.Empty;
            }
        }



        public bool DeletebyContentHistoryID(Guid ContentHistoryID)
        {
            try
            {
                new DataProvider().ContentHistoryDeletebyContentHistoryID(ContentHistoryID);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }


        public bool DeletebyContentID(string ContentID)
        {
            try
            {
                new DataProvider().ContentHistoryDeletebyContentID(ContentID);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }


        public bool DeletebyContentType(int ContentType)
        {
            try
            {
                new DataProvider().ContentHistoryDeletebyContentType(ContentType);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }


        public bool DeletebyEditorLoginUserID(int EditorLoginUserID)
        {
            try
            {
                new DataProvider().ContentHistoryDeletebyEditorLoginUserID(EditorLoginUserID);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }


        public bool DeletebyEditDate(DateTime EditDate)
        {
            try
            {
                new DataProvider().ContentHistoryDeletebyEditDate(EditDate);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }







        public bool UpdateByContentHistoryID(Guid ContentHistoryID, string ContentID, int ContentType, int EditorLoginUserID, DateTime EditDate, XElement BeforeEditContent)
        {

            try
            {
                new DataProvider().ContentHistoryUpdateByContentHistoryID(ContentHistoryID, ContentID, ContentType, EditorLoginUserID, EditDate, BeforeEditContent);
                return true;
            }
            catch (Exception ex)
            {
                if (SettingProvider.IsLoggerEnable())
                {
                    StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber());
                    Logger.TimeLog.ErrorWrite(FunctionData, ex.Message, "0");
                }
                return false;
            }
        }







        public void BindContentHistory(DropDownList dd)
        {
            var data = Get();
            dd.DataSource = data;
            dd.DataTextField = "CatagoryName";
            dd.DataValueField = "ContentHistoryID";
            dd.DataBind();
            ListItem noneItem = new ListItem();
            noneItem.Text = "select";
            noneItem.Value = "0";
            dd.Items.Insert(0, noneItem);
        }
        public void BindContentHistory(DropDownList dd, string SelectedValue)
        {
            var data = Get();
            dd.DataSource = data;
            dd.DataTextField = "CatagoryName";
            dd.DataValueField = "ContentHistoryID";
            dd.DataBind();
            ListItem noneItem = new ListItem();
            noneItem.Text = "select";
            noneItem.Value = "0";
            dd.Items.Insert(0, noneItem);
            dd.SelectedValue = SelectedValue;
        }
        #endregion
        #region ContentHistory
        public string SerializeXML(object objdata)
        {
            MemoryStream ms = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(ms, new UTF8Encoding());
            var data = objdata;
            Type oType = data.GetType();
            XmlSerializer serializer = new XmlSerializer(oType);
            writer.Formatting = Formatting.Indented;
            writer.IndentChar = ' ';
            writer.Indentation = 3;
            serializer.Serialize(writer, data);
            byte[] Result = new byte[ms.Length];
            ms.Position = 0;
            ms.Read(Result, 0, (int)ms.Length);
            string XmlResultString = Encoding.UTF8.GetString(Result, 0, (int)ms.Length);
            return XmlResultString;
        }
        public XElement GetXElementFromString(string XmlString, string xElementName)
        {
            XDocument xmlDoc = XDocument.Parse(XmlString);
            
            XElement data=xmlDoc.Element(xElementName);
            return data;
        }
        public void StoreContentHistory(string ContentID, int ContentType)
        {
            if (ContentType == (int)ContentTypeEnum.Image || ContentType == (int)ContentTypeEnum.Video || ContentType == (int)ContentTypeEnum.Document || ContentType == (int)ContentTypeEnum.Audio)
            {
                var data = new DocumentController().GetbyDocumentID(new Guid(ContentID),false);
                Document Adata = data[0];              
                
         
                var HistoryData = new ContentHistoryController().GetbyContentID(ContentID);
                XElement HistoriesXml;
                if (HistoryData.Count > 0)
                {
                    HistoriesXml = HistoryData[0].BeforeEditContent;
                    string XmlResultString = SerializeXML(Adata);
                    HistoriesXml.AddFirst(GetXElementFromString(XmlResultString,"Document"));
                    
                }
                else
                {
                    List<Document> LData = new List<Document>();
                    LData.Add(Adata);
                    string Xml=SerializeXML(LData);
                    
                    HistoriesXml=GetXElementFromString(Xml, "ArrayOfDocument");                    
                }
                

                new ContentHistoryController().Add(Guid.NewGuid(), ContentID, ContentType, data[0].LoginUserID, data[0].ModifiedDate, HistoriesXml);


            }
            else if (ContentType == (int)ContentTypeEnum.Article)
            {
                var data = new ArticleController().GetbyArticleID(new Guid(ContentID));
                Article Adata = data[0];
                MemoryStream ms = new MemoryStream();
                XmlTextWriter writer = new XmlTextWriter(ms, new UTF8Encoding());
                XmlSerializer serializer = new XmlSerializer(typeof(Article));
                writer.Formatting = Formatting.Indented;
                writer.IndentChar = ' ';
                writer.Indentation = 3;
                serializer.Serialize(writer, Adata);
                byte[] Result = new byte[ms.Length];
                ms.Position = 0;
                ms.Read(Result, 0, (int)ms.Length);
                string XmlResultString = Encoding.UTF8.GetString(Result, 0, (int)ms.Length);
                XDocument xmlDoc = XDocument.Parse(XmlResultString);
                var HistoryData = new ContentHistoryController().GetbyContentID(ContentID);
                XElement HistoriesXml;
                if (HistoryData.Count > 0)
                {
                    HistoriesXml = HistoryData[0].BeforeEditContent;
                }
                else
                {
                    HistoriesXml = new XElement("Articles");
                }
                HistoriesXml.AddFirst((from p in xmlDoc.Elements("Article") select p));

                new ContentHistoryController().Add(Guid.NewGuid(), ContentID, ContentType, data[0].LoginUserID, data[0].ModifiedDate, HistoriesXml);



            }
            else if (ContentType == (int)ContentTypeEnum.Event)
            {
                var data = new EventController().GetbyEventID(new Guid(ContentID));
                Event Adata = data[0];
                MemoryStream ms = new MemoryStream();
                XmlTextWriter writer = new XmlTextWriter(ms, new UTF8Encoding());
                XmlSerializer serializer = new XmlSerializer(typeof(Event));
                writer.Formatting = Formatting.Indented;
                writer.IndentChar = ' ';
                writer.Indentation = 3;
                serializer.Serialize(writer, Adata);
                byte[] Result = new byte[ms.Length];
                ms.Position = 0;
                ms.Read(Result, 0, (int)ms.Length);
                string XmlResultString = Encoding.UTF8.GetString(Result, 0, (int)ms.Length);
                XDocument xmlDoc = XDocument.Parse(XmlResultString);
                var HistoryData = new ContentHistoryController().GetbyContentID(ContentID);
                XElement HistoriesXml;
                if (HistoryData.Count > 0)
                {
                    HistoriesXml = HistoryData[0].BeforeEditContent;
                }
                else
                {
                    HistoriesXml = new XElement("Events");
                }
                HistoriesXml.AddFirst((from p in xmlDoc.Elements("Event") select p));

                new ContentHistoryController().Add(Guid.NewGuid(), ContentID, ContentType, data[0].LoginUserID, (DateTime)data[0].ModifiedDate, HistoriesXml);



            }
            else if (ContentType == (int)ContentTypeEnum.HomeWork)
            {
                var data = new HomeWorkController().GetbyHomeWorkID(Convert.ToInt32(ContentID));
                HomeWork Adata = data[0];
                MemoryStream ms = new MemoryStream();
                XmlTextWriter writer = new XmlTextWriter(ms, new UTF8Encoding());
                XmlSerializer serializer = new XmlSerializer(typeof(HomeWork));
                //Create our own namespaces for the output
                XmlSerializerNamespaces ns = new XmlSerializerNamespaces();

                //Add an empty namespace and empty value
                ns.Add("", "");

                writer.Formatting = Formatting.Indented;
                writer.IndentChar = ' ';
                writer.Indentation = 3;
                serializer.Serialize(writer, Adata,ns);
                byte[] Result = new byte[ms.Length];
                ms.Position = 0;
                ms.Read(Result, 0, (int)ms.Length);
                string XmlResultString = Encoding.UTF8.GetString(Result, 0, (int)ms.Length);
                XDocument xmlDoc = XDocument.Parse(XmlResultString);
                var HistoryData = new ContentHistoryController().GetbyContentID(ContentID);
                XElement HistoriesXml;
                if (HistoryData.Count > 0)
                {
                    HistoriesXml = HistoryData[0].BeforeEditContent;
                }
                else
                {
                    HistoriesXml = new XElement("HomeWorks");
                }
                HistoriesXml.AddFirst((from p in xmlDoc.Elements("HomeWork") select p));

                new ContentHistoryController().Add(Guid.NewGuid(), ContentID, ContentType, data[0].LoginUserID, data[0].ModifiedDate, HistoriesXml);



            }
        }
        public List<Document> GetDocumentHistory(string ContentID)
        {
            var data = GetbyContentID(ContentID);
            if (data.Count > 0)
            {
                XElement HistoriesXML = data[0].BeforeEditContent;

                #region Solution1
                XmlSerializer ser = new XmlSerializer(typeof(List<Document>));
                StringReader strreader = new StringReader(HistoriesXML.ToString());
                XmlTextReader xmlread = new XmlTextReader(strreader);
                List<Document> dds = (List<Document>)ser.Deserialize(xmlread);
                #endregion
                return dds;
            }
            else
            {
                return new List<Document>();
            }
        }

        #endregion





    }
}
