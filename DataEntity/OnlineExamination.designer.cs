#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataEntity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="edu")]
	public partial class OnlineExaminationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEXM_Question(EXM_Question instance);
    partial void UpdateEXM_Question(EXM_Question instance);
    partial void DeleteEXM_Question(EXM_Question instance);
    partial void InsertEXM_Answer(EXM_Answer instance);
    partial void UpdateEXM_Answer(EXM_Answer instance);
    partial void DeleteEXM_Answer(EXM_Answer instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    #endregion
		
		public OnlineExaminationDataContext() : 
				base(global::DataEntity.Properties.Settings.Default.eduConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineExaminationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineExaminationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineExaminationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineExaminationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EXM_Question> EXM_Questions
		{
			get
			{
				return this.GetTable<EXM_Question>();
			}
		}
		
		public System.Data.Linq.Table<EXM_Answer> EXM_Answers
		{
			get
			{
				return this.GetTable<EXM_Answer>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
	}
	
	[Table(Name="dbo.EXM_Question")]
	public partial class EXM_Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EXM_QuestionID;
		
		private string _Question;
		
		private int _ExamID;
		
		private int _Q_Type;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<EXM_Answer> _EXM_Answers;
		
		private EntityRef<Exam> _Exam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEXM_QuestionIDChanging(int value);
    partial void OnEXM_QuestionIDChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnExamIDChanging(int value);
    partial void OnExamIDChanged();
    partial void OnQ_TypeChanging(int value);
    partial void OnQ_TypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public EXM_Question()
		{
			this._EXM_Answers = new EntitySet<EXM_Answer>(new Action<EXM_Answer>(this.attach_EXM_Answers), new Action<EXM_Answer>(this.detach_EXM_Answers));
			this._Exam = default(EntityRef<Exam>);
			OnCreated();
		}
		
		[Column(Storage="_EXM_QuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EXM_QuestionID
		{
			get
			{
				return this._EXM_QuestionID;
			}
			set
			{
				if ((this._EXM_QuestionID != value))
				{
					this.OnEXM_QuestionIDChanging(value);
					this.SendPropertyChanging();
					this._EXM_QuestionID = value;
					this.SendPropertyChanged("EXM_QuestionID");
					this.OnEXM_QuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Question", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_ExamID", DbType="Int NOT NULL")]
		public int ExamID
		{
			get
			{
				return this._ExamID;
			}
			set
			{
				if ((this._ExamID != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIDChanging(value);
					this.SendPropertyChanging();
					this._ExamID = value;
					this.SendPropertyChanged("ExamID");
					this.OnExamIDChanged();
				}
			}
		}
		
		[Column(Storage="_Q_Type", DbType="Int NOT NULL")]
		public int Q_Type
		{
			get
			{
				return this._Q_Type;
			}
			set
			{
				if ((this._Q_Type != value))
				{
					this.OnQ_TypeChanging(value);
					this.SendPropertyChanging();
					this._Q_Type = value;
					this.SendPropertyChanged("Q_Type");
					this.OnQ_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="EXM_Question_EXM_Answer", Storage="_EXM_Answers", OtherKey="EXM_QuestionID")]
		public EntitySet<EXM_Answer> EXM_Answers
		{
			get
			{
				return this._EXM_Answers;
			}
			set
			{
				this._EXM_Answers.Assign(value);
			}
		}
		
		[Association(Name="Exam_EXM_Question", Storage="_Exam", ThisKey="ExamID", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.EXM_Questions.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.EXM_Questions.Add(this);
						this._ExamID = value.ExamID;
					}
					else
					{
						this._ExamID = default(int);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EXM_Answers(EXM_Answer entity)
		{
			this.SendPropertyChanging();
			entity.EXM_Question = this;
		}
		
		private void detach_EXM_Answers(EXM_Answer entity)
		{
			this.SendPropertyChanging();
			entity.EXM_Question = null;
		}
	}
	
	[Table(Name="dbo.EXM_Answer")]
	public partial class EXM_Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EXM_AnswerID;
		
		private int _EXM_QuestionID;
		
		private string _Answer;
		
		private bool _IsRight;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<EXM_Question> _EXM_Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEXM_AnswerIDChanging(int value);
    partial void OnEXM_AnswerIDChanged();
    partial void OnEXM_QuestionIDChanging(int value);
    partial void OnEXM_QuestionIDChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnIsRightChanging(bool value);
    partial void OnIsRightChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public EXM_Answer()
		{
			this._EXM_Question = default(EntityRef<EXM_Question>);
			OnCreated();
		}
		
		[Column(Storage="_EXM_AnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EXM_AnswerID
		{
			get
			{
				return this._EXM_AnswerID;
			}
			set
			{
				if ((this._EXM_AnswerID != value))
				{
					this.OnEXM_AnswerIDChanging(value);
					this.SendPropertyChanging();
					this._EXM_AnswerID = value;
					this.SendPropertyChanged("EXM_AnswerID");
					this.OnEXM_AnswerIDChanged();
				}
			}
		}
		
		[Column(Storage="_EXM_QuestionID", DbType="Int NOT NULL")]
		public int EXM_QuestionID
		{
			get
			{
				return this._EXM_QuestionID;
			}
			set
			{
				if ((this._EXM_QuestionID != value))
				{
					if (this._EXM_Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEXM_QuestionIDChanging(value);
					this.SendPropertyChanging();
					this._EXM_QuestionID = value;
					this.SendPropertyChanged("EXM_QuestionID");
					this.OnEXM_QuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Answer", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_IsRight", DbType="Bit NOT NULL")]
		public bool IsRight
		{
			get
			{
				return this._IsRight;
			}
			set
			{
				if ((this._IsRight != value))
				{
					this.OnIsRightChanging(value);
					this.SendPropertyChanging();
					this._IsRight = value;
					this.SendPropertyChanged("IsRight");
					this.OnIsRightChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="EXM_Question_EXM_Answer", Storage="_EXM_Question", ThisKey="EXM_QuestionID", IsForeignKey=true)]
		public EXM_Question EXM_Question
		{
			get
			{
				return this._EXM_Question.Entity;
			}
			set
			{
				EXM_Question previousValue = this._EXM_Question.Entity;
				if (((previousValue != value) 
							|| (this._EXM_Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EXM_Question.Entity = null;
						previousValue.EXM_Answers.Remove(this);
					}
					this._EXM_Question.Entity = value;
					if ((value != null))
					{
						value.EXM_Answers.Add(this);
						this._EXM_QuestionID = value.EXM_QuestionID;
					}
					else
					{
						this._EXM_QuestionID = default(int);
					}
					this.SendPropertyChanged("EXM_Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamID;
		
		private string _ExamName;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<EXM_Question> _EXM_Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamIDChanging(int value);
    partial void OnExamIDChanged();
    partial void OnExamNameChanging(string value);
    partial void OnExamNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Exam()
		{
			this._EXM_Questions = new EntitySet<EXM_Question>(new Action<EXM_Question>(this.attach_EXM_Questions), new Action<EXM_Question>(this.detach_EXM_Questions));
			OnCreated();
		}
		
		[Column(Storage="_ExamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamID
		{
			get
			{
				return this._ExamID;
			}
			set
			{
				if ((this._ExamID != value))
				{
					this.OnExamIDChanging(value);
					this.SendPropertyChanging();
					this._ExamID = value;
					this.SendPropertyChanged("ExamID");
					this.OnExamIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExamName", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string ExamName
		{
			get
			{
				return this._ExamName;
			}
			set
			{
				if ((this._ExamName != value))
				{
					this.OnExamNameChanging(value);
					this.SendPropertyChanging();
					this._ExamName = value;
					this.SendPropertyChanged("ExamName");
					this.OnExamNameChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="Exam_EXM_Question", Storage="_EXM_Questions", OtherKey="ExamID")]
		public EntitySet<EXM_Question> EXM_Questions
		{
			get
			{
				return this._EXM_Questions;
			}
			set
			{
				this._EXM_Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EXM_Questions(EXM_Question entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_EXM_Questions(EXM_Question entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
