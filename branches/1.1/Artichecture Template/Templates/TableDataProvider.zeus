##|TYPE Template
##|UNIQUEID d05c37dc-369b-4db7-a35f-8f033b4ad694
##|TITLE DataProvider
##|NAMESPACE Samples.DotNetScript
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		ui.Title = ".NetScript C# Sample: Java Class";
		ui.Width = 340;
		ui.Height = 200;

		// Setup Database selection combobox.
		GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
		GuiComboBox cmbDatabases = ui.AddComboBox("databaseName", "Select a database.");

		// Setup Tables selection multi-select listbox.
		GuiLabel label_t = ui.AddLabel("lblTables", "Select table:", "Select table from the combobox below.");
		GuiComboBox cmbTables = ui.AddComboBox("tableName", "Select a table.");

		// bind data to the controls
		cmbDatabases.BindData(MyMeta.Databases);
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
		
		
		// Attach the onchange event to the cmbDatabases control.
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");

	
		ui.ShowGui = true;ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		ui.ShowGui = true;
	}
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDatabases = ui["databaseName"] as GuiComboBox;
		GuiComboBox cmbTables = ui["tableName"] as GuiComboBox;
		
		cmbTables.BindData( MyMeta.Databases[cmbDatabases.SelectedValue].Tables );
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
public class GeneratedTemplate : DotNetScriptTemplate
{

    
	public string GetTableDBSName(string tableName)
		{
			string tablestr = "";
			if (tableName.EndsWith("y"))
			{
				tablestr = tableName.Substring(0, tableName.Length - 1) + "ies";
			}
			else
			{
				tablestr = tableName + "s";
			}
			return tablestr;
		}
	
	public void ParamToDBvalue(ITable table,string columnName)
	{
		foreach(IColumn column in table.Columns)
		{
		    if(column.Alias!=columnName)
			{
			%>data.<%=column.Name%>=<%=column.Name%>;
		<%}
		}
	}
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{		
		string databaseName = input["databaseName"].ToString();
		string tableName = input["tableName"].ToString();
		int columnCount=0;
		IDatabase database = MyMeta.Databases[databaseName];
		ITable table = database.Tables[tableName];
		string DataContextDBObject="CollegeDataBaseDataContext db = new CollegeDataBaseDataContext();\nDataLoadOptions option = new DataLoadOptions();\ndb.LoadOptions = option;\n";
		%>
		#region <%=table.Alias%>		
		
		public void <%=table.Alias%>Add(<%columnCount=0;foreach (IColumn column in table.Columns){columnCount++;if(columnCount==table.Columns.Count){%><%=column.LanguageType%> <%=column.Alias%>)<%}else{%><%=column.LanguageType%> <%=column.Alias%>,<%}}%>
		{
		<%=table.Alias%> Obj<%=table.Alias%>=new <%=table.Alias%>();
		<%foreach (IColumn column in table.Columns){%>
		Obj<%=table.Alias%>.<%=column.Alias%>=<%=column.Alias%>;
		<%}%>
		<%=DataContextDBObject%>		
            db.DeferredLoadingEnabled = false;
		if (SettingProvider.IsLoggerEnable()) { StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber()); objLogger = new Logger.TimeLog(FunctionData); }
			db.<%=GetTableDBSName(table.Alias)%>.InsertOnSubmit(Obj<%=table.Alias%>);
			db.SubmitChanges();
			 if (SettingProvider.IsLoggerEnable()) { objLogger.StopTime(); }
		}
		
		public int <%=table.Alias%>Add(<%columnCount=0;foreach (IColumn column in table.Columns){columnCount++;if(columnCount>1)if(columnCount==table.Columns.Count){%><%=column.LanguageType%> <%=column.Alias%>)<%}else{%><%=column.LanguageType%> <%=column.Alias%>,<%}}%>
		{
		<%=table.Alias%> Obj<%=table.Alias%>=new <%=table.Alias%>();
		<%columnCount=0;%>
		<%foreach (IColumn column in table.Columns){columnCount++;if(columnCount>1){%>
		
		Obj<%=table.Alias%>.<%=column.Alias%>=<%=column.Alias%>;
		<%}}%>
		<%=DataContextDBObject%>
		
            db.DeferredLoadingEnabled = false;
		if (SettingProvider.IsLoggerEnable()) { StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber()); objLogger = new Logger.TimeLog(FunctionData); }
			db.<%=GetTableDBSName(table.Alias)%>.InsertOnSubmit(Obj<%=table.Alias%>);
			db.SubmitChanges();
			 if (SettingProvider.IsLoggerEnable()) { objLogger.StopTime(); }
			 return Obj<%=table.Alias%>.<%=table.Columns[0].Alias%>;
		}
		
		
		
		public List<<%=table.Alias%>> <%=table.Alias%>Get(int PageSize, int PageNumber)
		{
			<%=DataContextDBObject%>
			
			db.ObjectTrackingEnabled = false;
            db.DeferredLoadingEnabled = false;
			if (SettingProvider.IsLoggerEnable()) { StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber()); objLogger = new Logger.TimeLog(FunctionData); }
			db.ObjectTrackingEnabled=false;
			var data = (from p in db.<%=GetTableDBSName(table.Alias)%> select p).Skip(PageNumber*PageSize).Take(PageSize).ToList();
			 if (SettingProvider.IsLoggerEnable()) { objLogger.StopTime(); }
			return data;

		}
		
		public List<<%=table.Alias%>> <%=table.Alias%>Get()
		{
		if (SettingProvider.IsLoggerEnable()) { StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber()); objLogger = new Logger.TimeLog(FunctionData); }
			<%=DataContextDBObject%>
			db.ObjectTrackingEnabled = false;
            db.DeferredLoadingEnabled = false;
			db.ObjectTrackingEnabled=false;
			var data = (from p in db.<%=GetTableDBSName(table.Alias)%> select p).ToList();
			 if (SettingProvider.IsLoggerEnable()) { objLogger.StopTime(); }
			return data;

		}
		
		<%foreach (IColumn column in table.Columns){%>
		public List<<%=table.Alias%>> <%=table.Alias%>Getby<%=column.Alias%>(<%=column.LanguageType%> <%=column.Alias%>, int PageSize, int PageNumber)
		{
		if (SettingProvider.IsLoggerEnable()) { StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber()); objLogger = new Logger.TimeLog(FunctionData); }
			<%=DataContextDBObject%>
			db.ObjectTrackingEnabled = false;
            db.DeferredLoadingEnabled = false;
			var data = (from p in db.<%=GetTableDBSName(table.Alias)%> where p.<%=column.Alias%> == <%=column.Alias%> select p).Skip(PageNumber*PageSize).Take(PageSize).ToList();
			 if (SettingProvider.IsLoggerEnable()) { objLogger.StopTime(); }
			return data;

		}
		<%}%>
		
		<%foreach (IColumn column in table.Columns){%>
		public List<<%=table.Alias%>> <%=table.Alias%>Getby<%=column.Alias%>(<%=column.LanguageType%> <%=column.Alias%>)
		{
		if (SettingProvider.IsLoggerEnable()) { StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber()); objLogger = new Logger.TimeLog(FunctionData); }
			<%=DataContextDBObject%>
			db.ObjectTrackingEnabled = false;
            db.DeferredLoadingEnabled = false;
			var data = (from p in db.<%=GetTableDBSName(table.Alias)%> where p.<%=column.Alias%> == <%=column.Alias%> select p).ToList();
			 if (SettingProvider.IsLoggerEnable()) { objLogger.StopTime(); }
			return data;

		}
		<%}%>
		
		<%foreach (IColumn column in table.Columns){%>
		public void <%=table.Alias%>Deleteby<%=column.Alias%>(<%=column.LanguageType%> <%=column.Alias%>)
		{
		if (SettingProvider.IsLoggerEnable()) { StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber()); objLogger = new Logger.TimeLog(FunctionData); }
			<%=DataContextDBObject%>
			
            db.DeferredLoadingEnabled = false;
			var data = (from p in db.<%=GetTableDBSName(table.Alias)%> where p.<%=column.Alias%> == <%=column.Alias%> select p);
			db.<%=GetTableDBSName(table.Alias)%>.DeleteAllOnSubmit(data);
			db.SubmitChanges();
			 if (SettingProvider.IsLoggerEnable()) { objLogger.StopTime(); }
		}
		<%}%>		
		
		<%foreach (IColumn column in table.Columns)
		{
			if(column.IsInPrimaryKey)
			{
		%>
		    public void <%=table.Alias%>UpdateBy<%=column.Alias%>(<%int columncol=0;foreach(IColumn Iicolumn in table.Columns){columncol++;if(columncol==table.Columns.Count){%><%=Iicolumn.LanguageType%> <%=Iicolumn.Alias%>)<%}else{%><%=Iicolumn.LanguageType%> <%=Iicolumn.Alias%>,<%}}%>
			{
			if (SettingProvider.IsLoggerEnable()) { StackTrace st = new StackTrace(new StackFrame(true)); Console.WriteLine(" Stack trace for current level: {0}", st.ToString()); StackFrame sf = st.GetFrame(0); string FunctionData = ""; FunctionData += string.Format(" File: {0}", sf.GetFileName()); FunctionData += string.Format(" Method: {0}", sf.GetMethod().Name); FunctionData += string.Format(" Line Number: {0}", sf.GetFileLineNumber()); FunctionData += string.Format(" Column Number: {0}", sf.GetFileColumnNumber()); objLogger = new Logger.TimeLog(FunctionData); }
			<%=DataContextDBObject%>				
            db.DeferredLoadingEnabled = false;
			<%=table.Alias%> data = db.<%=GetTableDBSName(table.Alias)%>.Single(p => p.<%=column.Alias%> == <%=column.Alias%>);
			<%ParamToDBvalue(table,column.Alias);%>
			db.SubmitChanges();
			 if (SettingProvider.IsLoggerEnable()) { objLogger.StopTime(); }
			}
		
		<%	}
		
		}%>
		
		
		
		#endregion
		#region Custom<%=table.Alias%>
		#endregion
	
	<%	
	}
}%>
##|BODY_END
